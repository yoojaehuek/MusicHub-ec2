{"ast":null,"code":"import _defineProperty from \"C:/Users/user/Desktop/MusicHub-ec2/popol2/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nexport function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n}\n\n// Emulate the sass function \"unitless\"\nexport function toUnitless(length) {\n  return parseFloat(length);\n}\n\n// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nexport function convertLength(baseFontSize) {\n  return function (length, toUnit) {\n    var fromUnit = getUnit(length);\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length;\n    }\n\n    // Convert input length to pixels.\n    var pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n\n    // Convert length in pixels to the output unit\n    var outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty(_ref) {\n  var size = _ref.size,\n    grid = _ref.grid;\n  var sizeBelow = size - size % grid;\n  var sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\n\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nexport function fontGrid(_ref2) {\n  var lineHeight = _ref2.lineHeight,\n    pixels = _ref2.pixels,\n    htmlFontSize = _ref2.htmlFontSize;\n  return pixels / (lineHeight * htmlFontSize);\n}\n\n/**\r\n * generate a responsive version of a given CSS property\r\n * @example\r\n * responsiveProperty({\r\n *   cssProperty: 'fontSize',\r\n *   min: 15,\r\n *   max: 20,\r\n *   unit: 'px',\r\n *   breakpoints: [300, 600],\r\n * })\r\n *\r\n * // this returns\r\n *\r\n * {\r\n *   fontSize: '15px',\r\n *   '@media (min-width:300px)': {\r\n *     fontSize: '17.5px',\r\n *   },\r\n *   '@media (min-width:600px)': {\r\n *     fontSize: '20px',\r\n *   },\r\n * }\r\n * @param {Object} params\r\n * @param {string} params.cssProperty - The CSS property to be made responsive\r\n * @param {number} params.min - The smallest value of the CSS property\r\n * @param {number} params.max - The largest value of the CSS property\r\n * @param {string} [params.unit] - The unit to be used for the CSS property\r\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\r\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\r\n * @returns {Object} responsive styles for {params.cssProperty}\r\n */\nexport function responsiveProperty(_ref3) {\n  var cssProperty = _ref3.cssProperty,\n    min = _ref3.min,\n    max = _ref3.max,\n    _ref3$unit = _ref3.unit,\n    unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,\n    _ref3$breakpoints = _ref3.breakpoints,\n    breakpoints = _ref3$breakpoints === void 0 ? [600, 900, 1200] : _ref3$breakpoints,\n    _ref3$transform = _ref3.transform,\n    transform = _ref3$transform === void 0 ? null : _ref3$transform;\n  var output = _defineProperty({}, cssProperty, \"\".concat(min).concat(unit));\n  var factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(function (breakpoint) {\n    var value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[\"@media (min-width:\".concat(breakpoint, \"px)\")] = _defineProperty({}, cssProperty, \"\".concat(Math.round(value * 10000) / 10000).concat(unit));\n  });\n  return output;\n}","map":{"version":3,"names":["isUnitless","value","String","parseFloat","length","getUnit","input","match","toUnitless","convertLength","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","alignProperty","_ref","size","grid","sizeBelow","sizeAbove","fontGrid","_ref2","lineHeight","pixels","htmlFontSize","responsiveProperty","_ref3","cssProperty","min","max","_ref3$unit","unit","_ref3$breakpoints","breakpoints","_ref3$transform","transform","output","_defineProperty","concat","factor","forEach","breakpoint","Math","round"],"sources":["C:/Users/user/Desktop/MusicHub-ec2/popol2/node_modules/@mui/material/styles/cssUtils.js"],"sourcesContent":["export function isUnitless(value) {\r\n  return String(parseFloat(value)).length === String(value).length;\r\n}\r\n\r\n// Ported from Compass\r\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\r\n// Emulate the sass function \"unit\"\r\nexport function getUnit(input) {\r\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\r\n}\r\n\r\n// Emulate the sass function \"unitless\"\r\nexport function toUnitless(length) {\r\n  return parseFloat(length);\r\n}\r\n\r\n// Convert any CSS <length> or <percentage> value to any another.\r\n// From https://github.com/KyleAMathews/convert-css-length\r\nexport function convertLength(baseFontSize) {\r\n  return (length, toUnit) => {\r\n    const fromUnit = getUnit(length);\r\n\r\n    // Optimize for cases where `from` and `to` units are accidentally the same.\r\n    if (fromUnit === toUnit) {\r\n      return length;\r\n    }\r\n\r\n    // Convert input length to pixels.\r\n    let pxLength = toUnitless(length);\r\n    if (fromUnit !== 'px') {\r\n      if (fromUnit === 'em') {\r\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\r\n      } else if (fromUnit === 'rem') {\r\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\r\n      }\r\n    }\r\n\r\n    // Convert length in pixels to the output unit\r\n    let outputLength = pxLength;\r\n    if (toUnit !== 'px') {\r\n      if (toUnit === 'em') {\r\n        outputLength = pxLength / toUnitless(baseFontSize);\r\n      } else if (toUnit === 'rem') {\r\n        outputLength = pxLength / toUnitless(baseFontSize);\r\n      } else {\r\n        return length;\r\n      }\r\n    }\r\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\r\n  };\r\n}\r\nexport function alignProperty({\r\n  size,\r\n  grid\r\n}) {\r\n  const sizeBelow = size - size % grid;\r\n  const sizeAbove = sizeBelow + grid;\r\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\r\n}\r\n\r\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\r\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\r\n// without changing the relative line height\r\nexport function fontGrid({\r\n  lineHeight,\r\n  pixels,\r\n  htmlFontSize\r\n}) {\r\n  return pixels / (lineHeight * htmlFontSize);\r\n}\r\n\r\n/**\r\n * generate a responsive version of a given CSS property\r\n * @example\r\n * responsiveProperty({\r\n *   cssProperty: 'fontSize',\r\n *   min: 15,\r\n *   max: 20,\r\n *   unit: 'px',\r\n *   breakpoints: [300, 600],\r\n * })\r\n *\r\n * // this returns\r\n *\r\n * {\r\n *   fontSize: '15px',\r\n *   '@media (min-width:300px)': {\r\n *     fontSize: '17.5px',\r\n *   },\r\n *   '@media (min-width:600px)': {\r\n *     fontSize: '20px',\r\n *   },\r\n * }\r\n * @param {Object} params\r\n * @param {string} params.cssProperty - The CSS property to be made responsive\r\n * @param {number} params.min - The smallest value of the CSS property\r\n * @param {number} params.max - The largest value of the CSS property\r\n * @param {string} [params.unit] - The unit to be used for the CSS property\r\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\r\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\r\n * @returns {Object} responsive styles for {params.cssProperty}\r\n */\r\nexport function responsiveProperty({\r\n  cssProperty,\r\n  min,\r\n  max,\r\n  unit = 'rem',\r\n  breakpoints = [600, 900, 1200],\r\n  transform = null\r\n}) {\r\n  const output = {\r\n    [cssProperty]: `${min}${unit}`\r\n  };\r\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\r\n  breakpoints.forEach(breakpoint => {\r\n    let value = min + factor * breakpoint;\r\n    if (transform !== null) {\r\n      value = transform(value);\r\n    }\r\n    output[`@media (min-width:${breakpoint}px)`] = {\r\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\r\n    };\r\n  });\r\n  return output;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}