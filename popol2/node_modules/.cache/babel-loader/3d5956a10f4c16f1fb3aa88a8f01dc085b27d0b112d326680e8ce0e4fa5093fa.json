{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { ListContext } from '../useList';\n\n/**\r\n * Stabilizes the ListContext value for the Option component, so it doesn't change when sibling Options update.\r\n *\r\n * @param value The value of the Option.\r\n * @returns The stable ListContext value.\r\n *\r\n * Demos:\r\n *\r\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\r\n *\r\n * API:\r\n *\r\n * - [useOptionContextStabilizer API](https://mui.com/base-ui/react-select/hooks-api/#use-option-context-stabilizer)\r\n */\nexport function useOptionContextStabilizer(value) {\n  var listContext = React.useContext(ListContext);\n  if (!listContext) {\n    throw new Error('Option: ListContext was not found.');\n  }\n  var getItemState = listContext.getItemState,\n    dispatch = listContext.dispatch;\n  var _getItemState = getItemState(value),\n    highlighted = _getItemState.highlighted,\n    selected = _getItemState.selected,\n    focusable = _getItemState.focusable;\n\n  // The local version of getItemState can be only called with the current Option's value.\n  // It doesn't make much sense to render an Option depending on other Options' state anyway.\n  var localGetItemState = React.useCallback(function (itemValue) {\n    if (itemValue !== value) {\n      throw new Error(['Base UI Option: Tried to access the state of another Option.', 'This is unsupported when the Option uses the OptionContextStabilizer as a performance optimization.'].join('/n'));\n    }\n    return {\n      highlighted: highlighted,\n      selected: selected,\n      focusable: focusable\n    };\n  }, [highlighted, selected, focusable, value]);\n\n  // Create a local (per Option) instance of the ListContext that changes only when\n  // the getItemState's return value changes.\n  // This makes Options re-render only when their state actually change, not when any Option's state changes.\n  var localContextValue = React.useMemo(function () {\n    return {\n      dispatch: dispatch,\n      getItemState: localGetItemState\n    };\n  }, [dispatch, localGetItemState]);\n  return {\n    contextValue: localContextValue\n  };\n}","map":{"version":3,"names":["React","ListContext","useOptionContextStabilizer","value","listContext","useContext","Error","getItemState","dispatch","_getItemState","highlighted","selected","focusable","localGetItemState","useCallback","itemValue","join","localContextValue","useMemo","contextValue"],"sources":["C:/Users/user/Desktop/MusicHub-ec2/popol2/node_modules/@mui/base/useOption/useOptionContextStabilizer.js"],"sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\nimport { ListContext } from '../useList';\r\n\r\n/**\r\n * Stabilizes the ListContext value for the Option component, so it doesn't change when sibling Options update.\r\n *\r\n * @param value The value of the Option.\r\n * @returns The stable ListContext value.\r\n *\r\n * Demos:\r\n *\r\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\r\n *\r\n * API:\r\n *\r\n * - [useOptionContextStabilizer API](https://mui.com/base-ui/react-select/hooks-api/#use-option-context-stabilizer)\r\n */\r\nexport function useOptionContextStabilizer(value) {\r\n  const listContext = React.useContext(ListContext);\r\n  if (!listContext) {\r\n    throw new Error('Option: ListContext was not found.');\r\n  }\r\n  const {\r\n    getItemState,\r\n    dispatch\r\n  } = listContext;\r\n  const {\r\n    highlighted,\r\n    selected,\r\n    focusable\r\n  } = getItemState(value);\r\n\r\n  // The local version of getItemState can be only called with the current Option's value.\r\n  // It doesn't make much sense to render an Option depending on other Options' state anyway.\r\n  const localGetItemState = React.useCallback(itemValue => {\r\n    if (itemValue !== value) {\r\n      throw new Error(['Base UI Option: Tried to access the state of another Option.', 'This is unsupported when the Option uses the OptionContextStabilizer as a performance optimization.'].join('/n'));\r\n    }\r\n    return {\r\n      highlighted,\r\n      selected,\r\n      focusable\r\n    };\r\n  }, [highlighted, selected, focusable, value]);\r\n\r\n  // Create a local (per Option) instance of the ListContext that changes only when\r\n  // the getItemState's return value changes.\r\n  // This makes Options re-render only when their state actually change, not when any Option's state changes.\r\n  const localContextValue = React.useMemo(() => ({\r\n    dispatch,\r\n    getItemState: localGetItemState\r\n  }), [dispatch, localGetItemState]);\r\n  return {\r\n    contextValue: localContextValue\r\n  };\r\n}"],"mappings":"AAAA,YAAY;;AAEZ,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,WAAW,QAAQ,YAAY;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,0BAA0BA,CAACC,KAAK,EAAE;EAChD,IAAMC,WAAW,GAAGJ,KAAK,CAACK,UAAU,CAACJ,WAAW,CAAC;EACjD,IAAI,CAACG,WAAW,EAAE;IAChB,MAAM,IAAIE,KAAK,CAAC,oCAAoC,CAAC;EACvD;EACA,IACEC,YAAY,GAEVH,WAAW,CAFbG,YAAY;IACZC,QAAQ,GACNJ,WAAW,CADbI,QAAQ;EAEV,IAAAC,aAAA,GAIIF,YAAY,CAACJ,KAAK,CAAC;IAHrBO,WAAW,GAAAD,aAAA,CAAXC,WAAW;IACXC,QAAQ,GAAAF,aAAA,CAARE,QAAQ;IACRC,SAAS,GAAAH,aAAA,CAATG,SAAS;;EAGX;EACA;EACA,IAAMC,iBAAiB,GAAGb,KAAK,CAACc,WAAW,CAAC,UAAAC,SAAS,EAAI;IACvD,IAAIA,SAAS,KAAKZ,KAAK,EAAE;MACvB,MAAM,IAAIG,KAAK,CAAC,CAAC,8DAA8D,EAAE,qGAAqG,CAAC,CAACU,IAAI,CAAC,IAAI,CAAC,CAAC;IACrM;IACA,OAAO;MACLN,WAAW,EAAXA,WAAW;MACXC,QAAQ,EAARA,QAAQ;MACRC,SAAS,EAATA;IACF,CAAC;EACH,CAAC,EAAE,CAACF,WAAW,EAAEC,QAAQ,EAAEC,SAAS,EAAET,KAAK,CAAC,CAAC;;EAE7C;EACA;EACA;EACA,IAAMc,iBAAiB,GAAGjB,KAAK,CAACkB,OAAO,CAAC;IAAA,OAAO;MAC7CV,QAAQ,EAARA,QAAQ;MACRD,YAAY,EAAEM;IAChB,CAAC;EAAA,CAAC,EAAE,CAACL,QAAQ,EAAEK,iBAAiB,CAAC,CAAC;EAClC,OAAO;IACLM,YAAY,EAAEF;EAChB,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}