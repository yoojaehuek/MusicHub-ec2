[{"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\index.js":"1","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\reportWebVitals.js":"2","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\App.js":"3","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Login.tsx":"4","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Join.tsx":"5","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Payment.tsx":"6","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\LoginMain.js":"7","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Success.js":"8","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Header.js":"9","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Main.js":"10","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\ChatBot.js":"11","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Footer.js":"12","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Fail.js":"13","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Dash.js":"14","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\EditProfile.js":"15","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Dj.js":"16","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Chart.js":"17","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Monthmusic.js":"18","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Video.js":"19","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Newchart.js":"20","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Listbar.js":"21","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\UpLoader.js":"22","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\config\\contansts.js":"23","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\cookie.js":"24","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Audio.js":"25","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Membershipmang.js":"26","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\MusicDetail.js":"27","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Scroll.js":"28","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Mypage.js":"29","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Playlist.js":"30","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Musics.js":"31","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Amount.js":"32","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\AccordionItem.js":"33","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\InfiniteRollingSlider.js":"34","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\customHook\\useAsync.js":"35","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Slider2.js":"36","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Slider3.js":"37","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Slider4.js":"38"},{"size":784,"mtime":1706580002463,"results":"39","hashOfConfig":"40"},{"size":417,"mtime":1706580002465,"results":"41","hashOfConfig":"40"},{"size":2460,"mtime":1706580002348,"results":"42","hashOfConfig":"40"},{"size":5264,"mtime":1706580002482,"results":"43","hashOfConfig":"40"},{"size":7423,"mtime":1706580002480,"results":"44","hashOfConfig":"40"},{"size":4394,"mtime":1706580002493,"results":"45","hashOfConfig":"40"},{"size":3363,"mtime":1706580002483,"results":"46","hashOfConfig":"40"},{"size":413,"mtime":1706580002499,"results":"47","hashOfConfig":"40"},{"size":1782,"mtime":1706580002478,"results":"48","hashOfConfig":"40"},{"size":6589,"mtime":1706580002484,"results":"49","hashOfConfig":"40"},{"size":4452,"mtime":1706580002471,"results":"50","hashOfConfig":"40"},{"size":1996,"mtime":1706580002477,"results":"51","hashOfConfig":"40"},{"size":304,"mtime":1706580002475,"results":"52","hashOfConfig":"40"},{"size":5391,"mtime":1706580002472,"results":"53","hashOfConfig":"40"},{"size":6424,"mtime":1706580002474,"results":"54","hashOfConfig":"40"},{"size":6275,"mtime":1706580002473,"results":"55","hashOfConfig":"40"},{"size":11042,"mtime":1706580002470,"results":"56","hashOfConfig":"40"},{"size":6590,"mtime":1706580002487,"results":"57","hashOfConfig":"40"},{"size":746,"mtime":1706580002501,"results":"58","hashOfConfig":"40"},{"size":3510,"mtime":1706580002493,"results":"59","hashOfConfig":"40"},{"size":5984,"mtime":1706580002481,"results":"60","hashOfConfig":"40"},{"size":10180,"mtime":1706580002500,"results":"61","hashOfConfig":"40"},{"size":186,"mtime":1706581952258,"results":"62","hashOfConfig":"40"},{"size":935,"mtime":1706580002351,"results":"63","hashOfConfig":"40"},{"size":4317,"mtime":1706580002469,"results":"64","hashOfConfig":"40"},{"size":227,"mtime":1706580002486,"results":"65","hashOfConfig":"40"},{"size":3956,"mtime":1706580002489,"results":"66","hashOfConfig":"40"},{"size":1579,"mtime":1706580002495,"results":"67","hashOfConfig":"40"},{"size":5543,"mtime":1706580002491,"results":"68","hashOfConfig":"40"},{"size":5048,"mtime":1706580002494,"results":"69","hashOfConfig":"40"},{"size":4303,"mtime":1706580002490,"results":"70","hashOfConfig":"40"},{"size":2650,"mtime":1706580002468,"results":"71","hashOfConfig":"40"},{"size":5362,"mtime":1706580002466,"results":"72","hashOfConfig":"40"},{"size":7140,"mtime":1706580002479,"results":"73","hashOfConfig":"40"},{"size":1834,"mtime":1706580002353,"results":"74","hashOfConfig":"40"},{"size":4985,"mtime":1706580002496,"results":"75","hashOfConfig":"40"},{"size":5236,"mtime":1706580002497,"results":"76","hashOfConfig":"40"},{"size":6198,"mtime":1706580002498,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},"x0mlc3",{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\index.js",["208"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter} from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\n// axios.defaults.withCredentials = true;\r\n// axios.defaults.baseURL = \"http://localhost:3000/\";\r\n// axios.defaults.withCredentials = true;\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <BrowserRouter basename=\"/app2\">\r\n    <App />\r\n  </BrowserRouter>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\reportWebVitals.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\App.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Login.tsx",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Join.tsx",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Payment.tsx",["209","210","211","212"],[],"import React from 'react';\r\nimport { useEffect, useRef, useState } from \"react\"\r\nimport {\r\n  PaymentWidgetInstance,\r\n  loadPaymentWidget,\r\n  ANONYMOUS,\r\n} from \"@tosspayments/payment-widget-sdk\"\r\nimport { useParams, useLocation } from 'react-router-dom';\r\n\r\nconst clientKey = \"test_gck_docs_Ovk5rk1EwkEbP0W43n07xlzm\"\r\nconst customerKey = \"cF_qY0QYTa9_AQYoQ2Ede\"\r\n\r\nexport function Payment() {\r\n  const location = useLocation();\r\n  const { state } = location;\r\n  console.log(\"state:\", state);\r\n\r\n\r\n  const paymentWidgetRef = useRef<PaymentWidgetInstance | null>(null)\r\n  const paymentMethodsWidgetRef = useRef<ReturnType<\r\n    PaymentWidgetInstance[\"renderPaymentMethods\"]\r\n  > | null>(null)\r\n  const [price, setPrice] = useState(state.price)\r\n  const [name, setName] = useState(state.name)\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      // ------  결제위젯 초기화 ------\r\n      // 비회원 결제에는 customerKey 대신 ANONYMOUS를 사용하세요.\r\n      const paymentWidget = await loadPaymentWidget(clientKey, customerKey)  // 회원 결제\r\n      // const paymentWidget = await loadPaymentWidget(clientKey, ANONYMOUS)  // 비회원 결제\r\n\r\n      // ------  결제위젯 렌더링 ------\r\n      // 결제수단 UI를 렌더링할 위치를 지정합니다. `#payment-method`와 같은 CSS 선택자와 결제 금액 객체를 추가하세요.\r\n      // DOM이 생성된 이후에 렌더링 메서드를 호출하세요.\r\n      // https://docs.tosspayments.com/reference/widget-sdk#renderpaymentmethods선택자-결제-금액-옵션\r\n      const paymentMethodsWidget = paymentWidget.renderPaymentMethods(\r\n        \"#payment-widget\",\r\n        { value: price },\r\n        // 렌더링하고 싶은 멀티 결제 UI의 variantKey\r\n        // https://docs.tosspayments.com/guides/payment-widget/admin#멀티-결제-ui\r\n        { variantKey: \"DEFAULT\" }\r\n      )\r\n\r\n      // ------  이용약관 렌더링 ------\r\n      // 이용약관 UI를 렌더링할 위치를 지정합니다. `#agreement`와 같은 CSS 선택자를 추가하세요.\r\n      // https://docs.tosspayments.com/reference/widget-sdk#renderagreement선택자-옵션\r\n      paymentWidget.renderAgreement(\r\n        '#agreement',\r\n        { variantKey: \"AGREEMENT\" } // 기본 이용약관 렌더링\r\n      )\r\n      paymentWidgetRef.current = paymentWidget\r\n      paymentMethodsWidgetRef.current = paymentMethodsWidget\r\n    })()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const paymentMethodsWidget = paymentMethodsWidgetRef.current\r\n\r\n    if (paymentMethodsWidget == null) {\r\n      return\r\n    }\r\n\r\n    // ------ 금액 업데이트 ------\r\n    // 새로운 결제 금액을 넣어주세요.\r\n    // https://docs.tosspayments.com/reference/widget-sdk#updateamount결제-금액\r\n    paymentMethodsWidget.updateAmount(\r\n      price,\r\n      paymentMethodsWidget.UPDATE_REASON.COUPON\r\n    )\r\n  }, [price])\r\n\r\n  return (\r\n    <div style={{ marginTop: '50px', textAlign: 'center' }}>\r\n      <h1>{name}</h1>\r\n      <span>{`${price.toLocaleString()}원`}</span>\r\n      <div style={{ marginTop: '20px', textAlign: 'center' }}>\r\n        <label style={{ textAlign: 'center' }}>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={(event) => {\r\n              setPrice(event.target.checked ? price - 500 : price + 500)\r\n            }}\r\n          />\r\n          500원 할인 쿠폰 적용\r\n        </label>\r\n      </div>\r\n      <div id=\"payment-widget\" />\r\n      <div id=\"agreement\" />\r\n      <button\r\n        onClick={async () => {\r\n          const paymentWidget = paymentWidgetRef.current\r\n\r\n          try {\r\n            // ------ '결제하기' 버튼 누르면 결제창 띄우기 ------\r\n            // 더 많은 결제 정보 파라미터는 결제위젯 SDK에서 확인하세요.\r\n            // https://docs.tosspayments.com/reference/widget-sdk#requestpayment결제-정보\r\n            await paymentWidget?.requestPayment({\r\n              orderId: \"GEc_JImf1o6lzPPcYT1r6\",\r\n              orderName: \"Music Hub\",\r\n              customerName: \"사용자\",\r\n              successUrl: `${window.location.origin}/success`,\r\n              failUrl: `${window.location.origin}/fail`,\r\n            })\r\n          } catch (error) {\r\n            // 에러 처리하기\r\n            console.error(error)\r\n          }\r\n        }}\r\n      >\r\n        결제하기\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\nexport default Payment;","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\LoginMain.js",["213"],[],"import React, {useState } from 'react';\r\nimport { Routes, Route, useLocation} from 'react-router-dom';\r\nimport Listb from \"./Listbar.js\";\r\nimport EditProfile from './EditProfile.js';\r\nimport MembershipManagement from './Membershipmang';\r\nimport MusicDetail from './MusicDetail'\r\nimport Dj from './Dj.js';\r\nimport Chart from './Chart.js';\r\nimport Monthmusic from './Monthmusic.js';\r\nimport Newchart from './Newchart.js';\r\nimport Video from './Video.js';\r\nimport Playlist from './Playlist';\r\nimport Mypage from './Mypage';\r\nimport Musics from './Musics';\r\nimport CustomAudioPlayer from './Audio.js';\r\nimport UpLoader from './UpLoader.js';\r\nimport { API_URL } from '../config/contansts.js';\r\nimport '../scss/LoginMain.scss';\r\n\r\nconst LoginMain = () => {\r\n  const location = useLocation();\r\n  const hidePages = ['/login-main/uploader', '/login-main/video'];\r\n  const Hide = hidePages.includes(location.pathname);\r\n\r\n  const [playList, setPlayList] = useState([\r\n    {\r\n      name: \"오늘 뭐 듣지?\",\r\n      writer: \"재생 버튼을 클릭해보세요\",\r\n      img: `${API_URL}/images/defaultMusicImg.png`,\r\n      src: `${API_URL}/api/upload/music/RoieShpigler-Aluminum.mp3`,\r\n      id: 1,\r\n    },\r\n  ]);\r\n\r\n  // 음악을 클릭했을 때 재생목록에 추가하는 함수\r\n  const onMusic = (music) => {\r\n    // e.preventDefault();\r\n    // console.log(e.target.value);\r\n    console.log(music);\r\n    setPlayList([\r\n      {\r\n        name: music.name,\r\n        writer: music.singer,\r\n        img: API_URL+ '/api' +music.imageUrl,\r\n        src: API_URL+ '/api' +music.musicUrl,\r\n        musicId: music.id,\r\n        id: 1,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  // 음악을 클릭했을 때 재생목록에 추가하는 함수\r\n  const onPlaylist = (musics) => {\r\n    if(musics == null){\r\n      return\r\n    }\r\n    \r\n    const playlist = []\r\n    musics.map((music, index) => {\r\n      playlist.push(\r\n        {\r\n          name: music.name,\r\n          writer: music.singer,\r\n          img: API_URL+ '/api' +music.imageUrl,\r\n          src: API_URL+ '/api' +music.musicUrl,\r\n          musicId: music.id,\r\n          id: index+1,\r\n        }\r\n      )\r\n    })\r\n    console.log(\"playlist: \", playlist);\r\n    setPlayList(playlist);\r\n  };\r\n\r\n  return (\r\n    <div id=\"loginMain\">\r\n      <Listb id='Listb'/>\r\n      <div id='loginMain-content'>\r\n        <Routes>\r\n          <Route path=\"/playlist\" element={<Playlist onMusic={onMusic} />} />\r\n          <Route path=\"/user/mypage\" element={<Mypage />} />\r\n          <Route path=\"/edit\" element={<EditProfile />} />\r\n          <Route path=\"/member\" element={<MembershipManagement />} />\r\n          <Route path=\"/musics\" element={<Musics onMusic={onMusic} />} />\r\n          <Route path=\"/detail\" element={<MusicDetail onMusic={onMusic} />} />\r\n          <Route path=\"/dj\" element={<Dj onMusic={onMusic} onPlaylist={onPlaylist} />} />\r\n          <Route path=\"/month\" element={<Monthmusic onMusic={onMusic} />} />\r\n          <Route path=\"/chart\" element={<Chart onMusic={onMusic} />} />\r\n          <Route path='/new' element={<Newchart onMusic={onMusic} />} />\r\n          <Route path='/video' element={<Video onMusic={onMusic} />} />\r\n          <Route path=\"/uploader\" element={<UpLoader />} />\r\n        </Routes>\r\n      </div>\r\n      {!Hide &&  <CustomAudioPlayer playList={playList} />}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default LoginMain;\r\n","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Success.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Header.js",["214"],[],"import React, {useEffect} from \"react\";\r\nimport \"../scss/Header.scss\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport { getCookie, removeCookie } from \"../cookie\";\r\n\r\nexport default function Header() {\r\n  const logout = () => {\r\n    removeCookie(\"accessToken\");\r\n    window.location.replace(\"/app2\");\r\n  }\r\n  const Login = () => {\r\n    let login = getCookie(\"accessToken\") == null ? \r\n    <div>\r\n      <NavLink to='/join'>\r\n        <Button style={{color:\"#000\"}}>회원가입</Button>\r\n      </NavLink>\r\n      <NavLink to='/login'>\r\n        <Button style={{color:\"black\"}}>로그인</Button>\r\n      </NavLink>\r\n    </div>\r\n  :\r\n    <div>\r\n      <NavLink to='/login-main/user/mypage'>\r\n        <Button style={{color:\"black\"}}>My</Button>\r\n      </NavLink>\r\n      <NavLink style={{color:\"black\"}} onClick={logout}>\r\n        로그아웃\r\n      </NavLink>\r\n      {/* <NavLink>\r\n        <Button color=\"inherit\" onClick={logout}>로그아웃</Button>\r\n      </NavLink> */}\r\n    </div>\r\n    return (\r\n      login\r\n    )\r\n  }\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"static\" sx={{ backgroundColor: '#90EE90' }}>\r\n        <Toolbar sx={{ justifyContent: 'space-between' }}>\r\n          <NavLink to='/'>\r\n            <Typography variant=\"h6\" component=\"div\" style={{color:\"#fff\"}}>\r\n              Music\r\n              <span style={{color:\"lightseagreen\"}}>Hub</span>\r\n            </Typography>\r\n          </NavLink>\r\n          {\r\n            <Login/>\r\n          }\r\n          \r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Main.js",["215"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport \"../scss/Main.scss\";\r\nimport ReactFullpage from '@fullpage/react-fullpage';\r\nimport AccordionItem from './AccordionItem';\r\nimport useAsync from '../customHook/useAsync';\r\nimport { API_URL } from '../config/contansts';\r\nimport Amount from './Amount';\r\nimport axios from 'axios';\r\nimport { useInView } from \"framer-motion\";\r\nimport InfiniteRollingSlider from './InfiniteRollingSlider';\r\n\r\n\r\nconst Main = () => {\r\n  // 환영 메시지와 메인 페이지 표시 상태를 관리하는 state\r\n  const [showWelcome, setShowWelcome] = useState(true);\r\n  const [showMainPage, setShowMainPage] = useState(false);\r\n\r\n  // 환영 메시지가 사라지는 시간을 기다렸다가 메인 페이지를 표시하는 useEffect\r\n  useEffect(() => {\r\n    // 1초 후에 환영 메시지를 천천히 사라지게 합니다.\r\n    const timeout = setTimeout(() => {\r\n      setShowWelcome(false);\r\n    }, 2000);\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, []);\r\n\r\n  // 메인 페이지를 표시하는 useEffect\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setShowMainPage(true);\r\n    }, 1000);\r\n  }, []);\r\n\r\n  // 섹션 컴포넌트를 스크롤 시 나타나게 하는 커스텀 훅\r\n  function Section22({ children }) {\r\n    const ref = useRef(null);\r\n    const isInView = useInView(ref, { triggerOnce: false });\r\n\r\n    return (\r\n      <section ref={ref}>\r\n        <span\r\n          style={{\r\n            transform: isInView ? \"none\" : \"translateX(-400px)\",\r\n            opacity: isInView ? 1 : 0,\r\n            transition: \"all 0.9s cubic-bezier(0.17, 0.55, 0.55, 1) 0.5s\"\r\n          }}\r\n        >\r\n          {children}\r\n        </span>\r\n      </section>\r\n    );\r\n  }\r\n  // API에서 요금 정보를 가져오는 비동기 함수\r\n  const getAmounts = async () => {\r\n    const res = await axios.get(`${API_URL}/api/amounts`);\r\n    return res.data;\r\n  };\r\n\r\n  // 비동기 상태를 다루는 커스텀 훅 사용\r\n  const [state] = useAsync(getAmounts, []);\r\n  const { loading, data: amounts, error } = state;\r\n\r\n  // 로딩 중이면 로딩 메시지 표시\r\n  if (loading) return <div>로딩중 ......</div>;\r\n  // 에러가 발생하면 에러 메시지 표시\r\n  if (error) return <div>에러가 발생했습니다.</div>;\r\n  // 요금 정보가 없으면 로딩 메시지 표시\r\n  if (!amounts) {\r\n    return <div>로딩중입니다.</div>;\r\n  }\r\n\r\n  return (\r\n    <ReactFullpage\r\n      scrollingSpeed={900}\r\n      navigation\r\n      render={({ }) => {\r\n        return (\r\n          <div id=\"fullpage-wrapper\">\r\n            <div className=\"section\">\r\n              {showWelcome ? (\r\n                <div className={`headertxt ${showWelcome ? '' : 'fade-out'}`}>\r\n                  <h1>저희 MusicHub를 찾아주셔서 감사합니다.</h1>\r\n                </div>\r\n              ) : (\r\n                <div className=\"main-page\">\r\n                  <div className={`main-page3 ${showMainPage ? 'fade-in' : ''}`}>\r\n                    <section className='Money2'>\r\n                      <div className='txt'>\r\n                        <h1>저희 MusicHub를 이용해야 하는 이유!</h1>\r\n                      </div>\r\n                      <ul className='section1'>\r\n                        <li className='section2'>\r\n                          <div className='sectionimg'></div>\r\n                          <div className='sectionp'>\r\n                            <p className='sectionp2'>새로운 음악 발견하기</p>\r\n                            <p className='section5'>100개가 넘는 트랙을 즐겨보세요!</p>\r\n                          </div>\r\n                        </li>\r\n                        <li className='section2'>\r\n                          <div className='sectionimg2'></div>\r\n                          <div className='sectionp'>\r\n                            <p className='sectionp2'>나만의 맞춤 플레이리스트</p>\r\n                            <p className='section5'>음악 취향에 맞춰 좋아요를 누르면 플레이리스트에 추가됩니다</p>\r\n                          </div>\r\n                        </li>\r\n                        <li className='section2'>\r\n                          <div className='sectionimg3'></div>\r\n                          <div className='sectionp'>\r\n                            <p className='sectionp2'>오프라인에서 감상</p>\r\n                            <p className='section5'>내 디바이스에 노래 다운로드.</p>\r\n                          </div>\r\n                        </li>\r\n                        <li className='section2'>\r\n                          <div className='sectionimg4'></div>\r\n                          <div className='sectionp'>\r\n                            <p className='sectionp2'>여러 기기에서 스트리밍</p>\r\n                            <p className='section5'>모바일, PC, 태블릿에서 음악을 들어보세요.</p>\r\n                          </div>\r\n                        </li>\r\n                      </ul>\r\n                    </section>\r\n                    <div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"section\">\r\n              <div className=\"main-page\">\r\n                <div className=\"section22\">\r\n                  <Section22>\r\n                    <div className='section22-txt'>\r\n                      <InfiniteRollingSlider></InfiniteRollingSlider>\r\n                    </div>\r\n                  </Section22>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"section\">\r\n              <section className=\"Money\">\r\n                <div className=\"Moneytoptxt\">\r\n                  <h1>요금제 선택하기</h1>\r\n                  <h2>스피커 및 기타 기기에서 제한 없이 마음껏 들으세요.</h2>\r\n                </div>\r\n                <div className='Moneyset3'>\r\n                  {amounts.map(amount => <Amount key={amount.id} amount={amount}></Amount>)}\r\n                </div>\r\n              </section>\r\n            </div>\r\n            <div className=\"section\">\r\n              <div className=\"main-page2\">\r\n                <div>\r\n                  <div>\r\n                    <h1>궁금한 점이 있으실까요?</h1>\r\n                    <h2>답변 드리겠습니다!</h2>\r\n                  </div>\r\n                  <AccordionItem />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Main;","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\ChatBot.js",["216"],[],"import React from 'react';\r\nimport ChatBot from 'react-simple-chatbot';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport { useState } from 'react';\r\n\r\nconst steps = [\r\n  {\r\n    id: '1',\r\n    message: '안녕하세요! 무엇을 도와드릴까요?',\r\n    trigger: '2',\r\n  },\r\n  {\r\n    id: '2',\r\n    options: [\r\n      { value: 'option1', label: '넌 누구니?', trigger: 'whoAmI' },\r\n      { value: 'option2', label: '음악 추천해줘', trigger: 'Music' },\r\n      { value: 'goBack', label: '처음으로 돌아가기', trigger: '1' },\r\n    ],\r\n  },\r\n  {\r\n    id: 'whoAmI',\r\n    message: '저는 저에요!',\r\n    trigger: 'Music',\r\n    trigger: '1',\r\n  },\r\n  {\r\n    id: 'Music',\r\n    message: '어떤 음악을 추천해 드릴까요?',\r\n    trigger: 'recommendMusic',\r\n  },\r\n  {\r\n    id: 'recommendMusic',\r\n    options: [\r\n      { value: 'musicOption1', label: '국가', trigger: 'music1' },\r\n      { value: 'musicOption2', label: '기분', trigger: 'music2' },\r\n      { value: 'musicOption3', label: '아무거나', trigger: 'music3' },\r\n      { value: 'goBack', label: '처음으로 돌아가기', trigger: '1' },\r\n    ],\r\n  },\r\n  {\r\n    id: 'music1',\r\n    message: '국가를 골라주세요.',\r\n    trigger: 'music11',\r\n  },\r\n  {\r\n    id: 'music11',\r\n    options: [\r\n      { value: 'musicOption1', label: 'K-POP', trigger: 'music111' },\r\n      { value: 'musicOption2', label: 'POP', trigger: 'music222' },\r\n      { value: 'musicOption3', label: 'J-POP', trigger: 'music333' },\r\n      { value: 'goBack', label: '처음으로 돌아가기', trigger: '1' },\r\n    ],\r\n  },\r\n  {\r\n    id: 'music111',\r\n    options: [\r\n      { value: 'musicOption1', label: '발라드', trigger: 'music1111' },\r\n      { value: 'musicOption2', label: '힙합', trigger: 'music1111' },\r\n      { value: 'musicOption3', label: '락', trigger: 'music1111' },\r\n      { value: 'musicOption4', label: '트로트', trigger: 'music1111' },\r\n      { value: 'musicOption5', label: '아이돌', trigger: 'music1111' },\r\n      { value: 'goBack', label: '처음으로 돌아가기', trigger: '1' },\r\n    ],\r\n  },\r\n  {\r\n    id: 'music222',\r\n    options: [\r\n      { value: 'musicOption1', label: '솔로', trigger: 'music1111' },\r\n      { value: 'musicOption2', label: '밴드', trigger: 'music1111' },\r\n      { value: 'musicOption3', label: '락, 힙합', trigger: 'music1111' },\r\n      { value: 'musicOption4', label: 'ost', trigger: 'music1111' },\r\n      { value: 'goBack', label: '처음으로 돌아가기', trigger: '1' },\r\n    ],\r\n  },\r\n  {\r\n    id: 'music333',\r\n    options: [\r\n      { value: 'musicOption1', label: '아이돌', trigger: 'music1111' },\r\n      { value: 'musicOption2', label: '가요', trigger: 'music1111' },\r\n      { value: 'musicOption3', label: '락', trigger: 'music1111' },\r\n      { value: 'musicOption4', label: '가쿠세이', trigger: 'music1111' },\r\n      { value: 'goBack', label: '처음으로 돌아가기', trigger: '1' },\r\n    ],\r\n  },\r\n  {\r\n    id: 'music1111',\r\n    message: '추천 음악입니다. ~~~~~~~~ .',\r\n    trigger: '1',\r\n  },\r\n  {\r\n    id: 'music2',\r\n    message: '지금은 어떤 기분이세요?.',\r\n    trigger: 'music22',\r\n  },\r\n  {\r\n    id: 'music22',\r\n    options: [\r\n      { value: 'musicOption1', label: '우울', trigger: 'music1111' },\r\n      { value: 'musicOption2', label: '행복', trigger: 'music1111' },\r\n      { value: 'musicOption3', label: '화남', trigger: 'music1111' },\r\n      { value: 'goBack', label: '처음으로 돌아가기', trigger: '1' },\r\n    ],\r\n  },\r\n  {\r\n    id: 'music3',\r\n    message: '아무거나 추천해드릴게요.',\r\n    trigger: 'music1111',\r\n  },\r\n];\r\n\r\n\r\nconst Simple = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleChatToggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Tooltip title=\"챗봇 열기\" arrow>\r\n        <Avatar\r\n          sx={{ bgcolor: 'secondary.main', cursor: 'pointer' }}\r\n          onClick={handleChatToggle}\r\n        >\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n      </Tooltip>\r\n      {isOpen && (\r\n        <div style={{ position: 'fixed', bottom: 10, right: 10, zIndex: 9999 }}>\r\n          <ChatBot\r\n            steps={steps}\r\n            recognitionEnable={true}\r\n            opened={true}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Simple;\r\n","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Footer.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Fail.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Dash.js",["217","218","219","220","221","222","223"],[],"import React, { useState, useEffect } from 'react';\r\nimport Chart from 'chart.js';\r\nimport Grid from '@mui/material/Grid';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Dash = () => {\r\n  const [userData, setUserData] = useState([100, 150, 200, 180, 220, 170, 130]);\r\n  const [categoryData, setCategoryData] = useState([50, 70, 90, 60, 80]);\r\n  const [totalVisitors, setTotalVisitors] = useState(15000);\r\n  const [totalSales, setTotalSales] = useState(5000);\r\n\r\n  useEffect(() => {\r\n    const userC = document.getElementById('userChart').getContext('2d');\r\n    new Chart(userC, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: ['월', '화', '수', '목', '금', '토', '일'],\r\n        datasets: [\r\n          {\r\n            label: '하루 이용자',\r\n            data: userData,\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        scales: {\r\n          x: {\r\n            type: 'category',\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    const categoryC = document.getElementById('categoryChart').getContext('2d');\r\n    new Chart(categoryC, {\r\n      type: 'doughnut',\r\n      data: {\r\n        labels: ['카테고리 1', '카테고리 2', '카테고리 3', '카테고리 4', '카테고리 5'],\r\n        datasets: [\r\n          {\r\n            data: categoryData,\r\n            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(255, 159, 64, 0.2)', 'rgba(255, 205, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)'],\r\n            borderColor: ['rgba(255, 99, 132, 1)', 'rgba(255, 159, 64, 1)', 'rgba(255, 205, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)'],\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n    });\r\n\r\n    const visitorsC = document.getElementById('visitorsChart').getContext('2d');\r\n    new Chart(visitorsC, {\r\n      type: 'line',\r\n      data: {\r\n        labels: ['월', '화', '수', '목', '금', '토', '일'],\r\n        datasets: [\r\n          {\r\n            label: '누적 방문자 수',\r\n            data: [500, 700, 850, 750, 900, 950, 1000],\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        scales: {\r\n          x: {\r\n            type: 'category',\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n\r\n    const salesC = document.getElementById('salesChart').getContext('2d');\r\n    new Chart(salesC, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: ['월', '화', '수', '목', '금', '토', '일'],\r\n        datasets: [\r\n          {\r\n            label: '상품 판매량',\r\n            data: [30, 40, 35, 45, 38, 50, 55],\r\n            backgroundColor: 'rgba(255, 205, 86, 0.2)',\r\n            borderColor: 'rgba(255, 205, 86, 1)',\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        scales: {\r\n          x: {\r\n            type: 'category',\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={2} md={2}>\r\n          <List\r\n            sx={{\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              gap: 2,\r\n              backgroundColor: '#87CEEB',\r\n              padding: 2,\r\n              textAlign: 'center',\r\n            }}\r\n          >\r\n            <ListItem button component={NavLink} to='/dash'>\r\n              일일 현황\r\n            </ListItem>\r\n            <ListItem button component={NavLink} to='/uploader' sx={{ marginBottom: 100 }}>\r\n              업로드\r\n            </ListItem>\r\n            <ListItem button component={NavLink} to='/'>\r\n              메인으로 돌아가기\r\n            </ListItem>\r\n          </List>\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} md={6}>\r\n              <h2>하루 이용자</h2>\r\n              <div style={{ width: '100%', height: '200px' }}>\r\n                <canvas id=\"userChart\" style={{ width: '100%', height: '100%' }}></canvas>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={10} md={5}>\r\n            <div>\r\n              <h2>인기 카테고리</h2>\r\n              <div style={{ width: '100%', height: '200px' }}>\r\n                <canvas id=\"categoryChart\" style={{ width: '100%', height: '100%' }}></canvas>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={10} md={5}>\r\n            <div>\r\n              <h2>누적 방문자 수</h2>\r\n              <div style={{ width: '100%', height: '200px' }}>\r\n                <canvas id=\"visitorsChart\" style={{ width: '100%', height: '100%' }}></canvas>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={10} md={5}>\r\n            <div>\r\n              <h2>상품 판매량</h2>\r\n              <div style={{ width: '100%', height: '200px' }}>\r\n                <canvas id=\"salesChart\" style={{ width: '100%', height: '100%' }}></canvas>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dash;","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\EditProfile.js",["224","225"],[],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button, Typography, Box, Grid } from '@mui/material';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { getCookie, removeCookie } from \"../cookie\";\r\nimport { API_URL } from '../config/contansts';\r\nimport '../scss/EditProfile.scss'\r\n\r\nconst EditProfile = () => {\r\n  const navigate = useNavigate();\r\n\r\n  // EditProfile 페이지 진입 시 토큰 검증\r\n  useEffect(() => {\r\n    const verify = async () => {\r\n      // 쿠키에 accessToken이 존재하는지 확인\r\n      if (getCookie('accessToken') != null) {\r\n        const login = getCookie('accessToken');\r\n        // 토큰을 사용하여 서버에 인증 요청\r\n        await axios({\r\n          url: `${API_URL}/api/verify`,\r\n          method: 'POST',\r\n          headers: {\r\n            Authorization: 'Bearer ' + login\r\n          }\r\n        }).then((res) => {\r\n          // 응답이 OK가 아닌 경우 로그인 페이지로 리다이렉션\r\n          if (res.statusText !== \"OK\") {\r\n            alert('다시 로그인 해주세요');\r\n            removeCookie('accessToken');\r\n            navigate('/');\r\n          }\r\n        }).catch((err) => {\r\n          console.log(err);\r\n        });\r\n      } else {\r\n        // 쿠키에 accessToken이 없는 경우 로그인 페이지로 리다이렉션\r\n        alert('다시 로그인 해주세요');\r\n        navigate(\"/\");\r\n      }\r\n    };\r\n    \r\n    verify();\r\n  }, []);\r\n\r\n  // 폼 데이터 상태 설정\r\n  const [formData, setFormData] = useState({\r\n    password: '',\r\n    newPassword: '',\r\n    confirmPassword: '',\r\n    phoneNumber: '',\r\n    email: '',\r\n  });\r\n\r\n  // 폼 입력값 변경 핸들러\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // 폼 제출 핸들러\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    // 쿠키에 accessToken이 존재하는지 확인\r\n    if (getCookie('accessToken')) {\r\n      const login = getCookie('accessToken');\r\n      // 새로운 비밀번호와 확인 비밀번호가 일치하는지 확인\r\n      if (formData.newPassword === formData.confirmPassword) {\r\n        const newPassword = formData.newPassword;\r\n        const newPhone = formData.phoneNumber;\r\n        const newEmail = formData.email;\r\n        // 서버에 회원 정보 수정 요청\r\n        await axios({\r\n          url: `${API_URL}/api/user`,\r\n          method: 'PUT',\r\n          headers: {\r\n            Authorization: 'Bearer ' + login\r\n          },\r\n          data: {\r\n            newPassword: newPassword,\r\n            newPhone: newPhone,\r\n            newEmail: newEmail,\r\n          }\r\n\r\n        }).then((res) => {\r\n          // 응답 상태가 OK인 경우 회원 정보가 성공적으로 수정되었다는 메시지 출력\r\n          if (res.statusText === \"OK\") {\r\n            alert(\"회원 정보가 성공적으로 수정되었습니다.\");\r\n            navigate(\"/\");\r\n          }\r\n          console.log(res);\r\n        }).catch((err) => {\r\n          console.log(err);\r\n        });\r\n      }\r\n    } else {\r\n      // 쿠키에 accessToken이 없는 경우 로그인 페이지로 리다이렉션\r\n      alert(\"다시 로그인 해주세요\");\r\n      navigate('/');\r\n    }\r\n  };\r\n\r\n  // JSX 반환\r\n  return (\r\n    <Box sx={{ padding: '20px', borderRadius: '8px', textAlign: 'center' }}>\r\n      <Typography variant=\"h6\" gutterBottom style={{color: 'white', paddingTop: '130px'}}>\r\n        회원정보 수정\r\n      </Typography>\r\n      <form className=\"Fields\" onSubmit={handleSubmit} style={{paddingTop: '30px'}}>\r\n        <Grid container spacing={2} direction=\"column\" justifyContent=\"center\">\r\n          {/* 비밀번호 입력 필드 */}\r\n          <Grid item xs={12} md={6}>\r\n            <input id='tf' \r\n              placeholder='비밀번호'             \r\n              fullWidth\r\n              label=\"비밀번호\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n              margin=\"normal\"\r\n              sx={{ width: '35%' }}\r\n            />\r\n          </Grid>\r\n          {/* 새 비밀번호 입력 필드 */}\r\n          <Grid item xs={12} md={6}>\r\n            <input id='tf'\r\n              placeholder='새 비밀번호'\r\n              fullWidth\r\n              label=\"새 비밀번호\"\r\n              type=\"password\"\r\n              name=\"newPassword\"\r\n              value={formData.newPassword}\r\n              onChange={handleChange}\r\n              margin=\"normal\"\r\n              sx={{ width: '35%' }}\r\n            />\r\n          </Grid>\r\n          {/* 비밀번호 확인 입력 필드 */}\r\n          <Grid item xs={12} md={6}>\r\n            <input id='tf'\r\n              placeholder='비밀번호 확인'\r\n              fullWidth\r\n              label=\"비밀번호 확인\"\r\n              type=\"password\"\r\n              name=\"confirmPassword\"\r\n              value={formData.confirmPassword}\r\n              onChange={handleChange}\r\n              margin=\"normal\"\r\n              sx={{ width: '35%' }}\r\n            />\r\n          </Grid>\r\n          {/* 전화번호 입력 필드 */}\r\n          <Grid item xs={12} md={6}>\r\n            <input id='tf'\r\n              placeholder='전화번호'\r\n              fullWidth\r\n              label=\"전화번호\"\r\n              name=\"phoneNumber\"\r\n              value={formData.phoneNumber}\r\n              onChange={handleChange}\r\n              margin=\"normal\"\r\n              sx={{ width: '35%' }}\r\n            />\r\n          </Grid>\r\n          {/* 이메일 입력 필드 */}\r\n          <Grid item xs={12} md={6}>\r\n            <input id='tf'\r\n              placeholder='이메일'\r\n              fullWidth\r\n              label=\"이메일\"\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n              margin=\"normal\"\r\n              sx={{ width: '35%' }}\r\n            />\r\n          </Grid>\r\n          {/* 저장 버튼 */}\r\n          <Grid item xs={12} md={6}>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{ marginTop: '20px', width: '1%' }}>\r\n              저장\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default EditProfile;\r\n","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Dj.js",["226"],[],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport useAsync from \"../customHook/useAsync\";\r\nimport { API_URL } from \"../config/contansts\";\r\nimport { CssBaseline, Box, Grid, Typography, CircularProgress } from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport { NavLink } from 'react-router-dom';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\nimport \"../scss/dj.scss\"\r\nimport Footer from './Footer';\r\n\r\nconst PlaylistItem = styled(Box)({\r\n  borderRadius: '8px',\r\n  textAlign: 'center',\r\n  position: 'relative',\r\n  '&:hover .play-icon': {\r\n    opacity: 1,\r\n    cursor: 'pointer',\r\n  },\r\n  '&:hover img': {\r\n    opacity: 0.8,\r\n    cursor: 'pointer',\r\n  },\r\n  \r\n});\r\n\r\nconst PlaylistImage = styled('img')({\r\n  width: '90%',\r\n  transition: 'opacity 0.3s ease',\r\n});\r\n\r\nconst PlayIcon = styled(PlayArrowIcon) ({\r\n  border  :  'solid 1px rgba(0, 0, 0, 0); ',\r\n  borderRadius : '50px',\r\n  backgroundColor : '#FF0050',\r\n  position: 'absolute',\r\n  color : 'white',\r\n  top: '85%',\r\n  left: '20%',\r\n  transform: 'translate(-50%, -50%)',\r\n  opacity: 0,\r\n  transition: 'opacity 0.3s ease',\r\n});\r\n\r\nconst playlists = [\r\n  { id: 1, imageUrl: '/images/dj/1.png'},\r\n  { id: 2, imageUrl: '/images/dj//2.png'},\r\n  { id: 3, imageUrl: '/images/dj//3.png'},\r\n  { id: 4, imageUrl: '/images/dj//4.png'},\r\n  { id: 1, imageUrl: '/images/dj//5.png'},\r\n  { id: 2, imageUrl: '/images/dj//6.png'},\r\n  { id: 3, imageUrl: '/images/dj//7.png'},\r\n  { id: 4, imageUrl: '/images/dj//8.png'},\r\n  { id: 1, imageUrl: '/images/dj//9.png'},\r\n  { id: 2, imageUrl: '/images/dj//10.png'},\r\n  { id: 3, imageUrl: '/images/dj//11.png'},\r\n  { id: 4, imageUrl: '/images/dj//12.png'},\r\n];\r\n\r\nconst playlist = [\r\n  { id: 1, imageUrl: '/images/dj2/1.png'},\r\n  { id: 2, imageUrl: '/images/dj2/2.png'},\r\n  { id: 3, imageUrl: '/images/dj2/3.png'},\r\n  { id: 4, imageUrl: '/images/dj2/4.png'},\r\n  { id: 1, imageUrl: '/images/dj2/5.png'},\r\n  { id: 2, imageUrl: '/images/dj2/6.png'},\r\n  { id: 3, imageUrl: '/images/dj2/7.png'},\r\n  { id: 4, imageUrl: '/images/dj2/8.png'},\r\n  { id: 1, imageUrl: '/images/dj2/9.png'},\r\n  { id: 2, imageUrl: '/images/dj2/10.png'},\r\n  { id: 3, imageUrl: '/images/dj2/11.png'},\r\n  { id: 4, imageUrl: '/images/dj2/12.png'},\r\n  { id: 1, imageUrl: '/images/dj2/13.png'},\r\n  { id: 2, imageUrl: '/images/dj2/14.png'},\r\n  { id: 3, imageUrl: '/images/dj2/15.png'},\r\n  { id: 4, imageUrl: '/images/dj2/16.png'},\r\n  { id: 1, imageUrl: '/images/dj2/17.png'},\r\n  { id: 2, imageUrl: '/images/dj2/18.png'},\r\n  { id: 3, imageUrl: '/images/dj2/19.png'},\r\n  { id: 4, imageUrl: '/images/dj2/20.png'},\r\n  { id: 1, imageUrl: '/images/dj2/21.png'},\r\n  { id: 2, imageUrl: '/images/dj2/22.png'},\r\n  { id: 3, imageUrl: '/images/dj2/23.png'},\r\n  { id: 4, imageUrl: '/images/dj2/24.png'},\r\n];\r\n\r\nconst Dj = (props) => {\r\n\r\n  //전체곡 조회함수\r\n  const getMusics = async () => {\r\n    const allMusic = await axios.get(`${API_URL}/api/musics`);\r\n    const K_Idol = await axios.get(`${API_URL}/api/musics/kind?kind=한국-아이돌&limit=15`);\r\n    const POP = await axios.get(`${API_URL}/api/musics/kind?kind=POP&limit=15`);\r\n    const hiphop = await axios.get(`${API_URL}/api/musics/kind?kind=힙합&limit=15`);\r\n    const musics = {allMusic: allMusic.data, K_Idol: K_Idol.data, hiphop: hiphop.data, POP: POP.data};\r\n    // console.log(\"res.data:\", res.data);\r\n    return musics;\r\n  };\r\n\r\n  const [state] = useAsync(getMusics, []);\r\n  const { loading, data: musics, error } = state; //state구조분해\r\n  console.log(\"musics: \", musics);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div style={{ textAlign: 'center', padding: '20px', color: 'white', backgroundColor: '#000', height: '100vh', display: \"flex\", flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          잠시만 기다려주세요...\r\n        </Typography>\r\n        <CircularProgress style={{ marginTop: '10px' }} />\r\n      </div>\r\n    )\r\n  }\r\n  if (error) return <div>에러가 발생했습니다.</div>;\r\n  if (!musics) {\r\n    return <div>로딩중입니다.</div>;\r\n  }\r\n  return (\r\n    <div className='djmain'>\r\n      <CssBaseline />\r\n      {/* <Listb /> */}\r\n      <div className='dj-item'>\r\n        <div className='dj-cotainer'>\r\n          <h1>DJ 스테이션</h1>\r\n          <h2>느낌별 스테이션</h2>\r\n          <Grid container spacing={2}>\r\n            {playlists.map((playlist, index) => (\r\n              <Grid item xs={12} sm={6} md={2} key={index}>\r\n                <PlaylistItem >\r\n                  <PlaylistImage src={API_URL + playlist.imageUrl} style={{ filter: index >= 3 ? \"grayscale(100%)\" : \"none\" }} />\r\n                  <PlayIcon\r\n                    className=\"play-icon\"\r\n                    fontSize=\"large\"\r\n                    onClick={() => {\r\n                      const selectedMusic =\r\n                        index === 0 ? musics.allMusic :\r\n                        index === 1 ? musics.hiphop :\r\n                        index === 2 ? musics.K_Idol :\r\n                        null; // 예외 처리가 필요하면 추가\r\n                      props.onPlaylist(selectedMusic);\r\n                    }}\r\n                  />\r\n                </PlaylistItem>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n          <h2>장르 스테이션</h2>\r\n          <Grid container spacing={2}>\r\n            {playlist.map((playlist, index) => (\r\n              <Grid item xs={12} sm={6} md={2} key={index}>\r\n                <PlaylistItem>\r\n                  <PlaylistImage src={API_URL + playlist.imageUrl} style={{ filter: index >= 2 ? \"grayscale(100%)\" : \"none\" }}/>\r\n                  <PlayIcon\r\n                  className=\"play-icon\"\r\n                  fontSize=\"large\"\r\n                  onClick={() => {\r\n                    const selectedMusic =\r\n                      index === 0 ? musics.K_Idol :\r\n                      index === 1 ? musics.POP :\r\n                      null; // 예외 처리가 필요하면 추가\r\n                    props.onPlaylist(selectedMusic);\r\n                  }}\r\n                />\r\n                </PlaylistItem>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n        <Footer/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dj;\r\n","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Chart.js",["227"],[],"import React, { useEffect } from \"react\";\r\nimport {\r\n  CssBaseline,\r\n  Box,\r\n  Grid,\r\n  Typography,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/system\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\r\nimport Footer from \"./Footer\";\r\nimport axios from \"axios\";\r\nimport { getCookie, removeCookie } from \"../cookie\";\r\nimport { API_URL } from \"../config/contansts\";\r\nimport useAsync from \"../customHook/useAsync\";\r\n\r\nconst MainContent = styled(\"div\")({\r\n  padding: \"2vw\",\r\n});\r\n\r\nconst PlaylistItem = styled(Box)({\r\n  borderRadius: \"8px\",\r\n  marginBottom: \"20px\",\r\n  position: \"relative\",\r\n  \"&:hover .play-icon\": {\r\n    opacity: 1,\r\n    cursor: \"pointer\",\r\n    color: \"red\",\r\n  },\r\n  \"&:hover img\": {\r\n    opacity: 0.8,\r\n    cursor: \"pointer\",\r\n  },\r\n});\r\n\r\nconst PlaylistImage = styled(\"img\")({\r\n  width: \"20%\",\r\n  height: \"10vh\",\r\n  transition: \"opacity 0.3s ease\",\r\n  marginRight: \"1vw\",\r\n});\r\n\r\nconst PlayIcon = styled(PlayArrowIcon)({\r\n  position: \"absolute\",\r\n  bottom: \"5.5%\",\r\n  left: \"9.5%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  opacity: 0,\r\n  transition: \"opacity 0.3s ease\",\r\n});\r\n\r\n//전체곡 조회함수\r\nconst getMusics = async (limit) => {\r\n  const res = await axios.get(`${API_URL}/api/musics/kind?kind=POP&limit=15`);\r\n  const res1 = await axios.get(`${API_URL}/api/musics/kind?kind=한국&limit=15`);\r\n  const res2 = await axios.get(`${API_URL}/api/musics/kind?kind=일본&limit=15`);\r\n  console.log(\"res.data:\", res.data);\r\n  const allResData = [...res.data, ...res1.data, ...res2.data];\r\n  console.log(\"allResData:\", allResData);\r\n  return allResData;\r\n};\r\n\r\nconst Chartmusic = (props) => {\r\n  const navigate = useNavigate();\r\n\r\n  // 페이지가 로드될 때 실행되는 useEffect hook.\r\n  useEffect(() => {\r\n    // 사용자의 accessToken을 쿠키에서 가져옴\r\n    const token = getCookie(\"accessToken\");\r\n\r\n    // 토큰이 존재하는 경우, 서버에서 토큰 유효성을 검증함\r\n    const verify = async () => {\r\n      if (token != null) {\r\n        try {\r\n          // 서버에 인증 요청을 보냄\r\n          const response = await axios.post(`${API_URL}/api/verify`, null, {\r\n            headers: {\r\n              Authorization: \"Bearer \" + token,\r\n            },\r\n          });\r\n\r\n          // 서버 응답이 OK일 경우 (토큰이 유효한 경우)\r\n          if (response.statusText === \"OK\") {\r\n            // 토큰이 유효하면 아무 작업도 수행하지 않음\r\n            // 사용자를 현재 페이지에 둠\r\n          }\r\n        } catch (error) {\r\n          // 서버 응답이 OK가 아닐 경우 (토큰이 유효하지 않은 경우)\r\n          // 에러 메시지를 콘솔에 기록\r\n          console.log(error);\r\n\r\n          // 경고창을 띄우고, 쿠키에 저장된 토큰을 제거함\r\n          alert(\"다시 로그인 해주세요\");\r\n          removeCookie(\"accessToken\");\r\n\r\n          // 사용자를 로그인 페이지로 리다이렉트함\r\n          navigate(\"/\");\r\n        }\r\n      } else {\r\n        // 토큰이 없는 경우 (로그인되지 않은 사용자)\r\n        // 경고창을 띄우고, 사용자를 로그인 페이지로 리다이렉트함\r\n        alert(\"다시 로그인 해주세요\");\r\n        navigate(\"/\");\r\n      }\r\n    };\r\n\r\n    // verify 함수 실행 (페이지가 로드될 때마다 실행됨)\r\n    verify();\r\n  }, []); // useEffect의 의존성 배열이 빈 배열이므로 한 번만 실행됨\r\n\r\n  // 특정 음악 장르에 해당하는 음악만 필터링하여 반환하는 함수\r\n  const getFilteredMusics = (kinds) => {\r\n    console.log(\"kind: \", kinds);\r\n    let arr = musics.filter((music) => kinds.includes(music.kind));\r\n    console.log(\"arr: \", arr);\r\n    // 기본적으로는 전체 차트를 보여줌\r\n    return arr;\r\n  };\r\n\r\n  // useAsync 커스텀 훅을 사용하여 음악 데이터를 비동기적으로 가져오는 로직\r\n  const [state] = useAsync(getMusics, []); // getMusics 함수를 사용하여 데이터를 비동기적으로 가져옴\r\n  const { loading, data: musics, error } = state; // state 객체에서 loading, musics, error 값을 구조 분해\r\n\r\n  // 로딩 중일 때는 로딩 메시지를 표시\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        style={{\r\n          textAlign: \"center\",\r\n          padding: \"20px\",\r\n          color: \"white\",\r\n          backgroundColor: \"#000\",\r\n          height: \"100vh\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          잠시만 기다려주세요...\r\n        </Typography>\r\n        <CircularProgress style={{ marginTop: \"10px\" }} />\r\n      </div>\r\n    );\r\n  }\r\n  // 에러 발생 시 에러 메시지를 표시\r\n  if (error) return <div>에러가 발생했습니다.</div>;\r\n\r\n  // musics가 존재하지 않는 경우 로딩 메시지를 표시\r\n  if (!musics) {\r\n    return <div>로딩중입니다.</div>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", background: \"black\" }}>\r\n      <CssBaseline />\r\n      <MainContent style={{ color: \"white\" }}>\r\n        <div>\r\n          <h1 style={{ paddingBottom: \"1vw\", color: \"llightseagreen\" }}>\r\n            차트\r\n          </h1>\r\n          <h2 style={{ paddingBottom: \"1vw\", color: \"lightseagreen\" }}>\r\n            K-POP TOP 15\r\n          </h2>\r\n          <Grid container spacing={1}>\r\n            {getFilteredMusics([\r\n              \"한국-발라드\",\r\n              \"한국-힙합\",\r\n              \"한국-트로트\",\r\n              \"한국-동요\",\r\n              \"한국-아이돌\",\r\n            ]).map((music) => (\r\n              <Grid item xs={12} sm={6} md={4} key={music.id}>\r\n                <PlaylistItem\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  <PlaylistImage\r\n                    src={`${API_URL}/api${music.imageUrl}`}\r\n                    alt={music.name}\r\n                    onClick={() => {\r\n                      props.onMusic(music);\r\n                    }}\r\n                  />\r\n                  <PlayIcon\r\n                    className=\"play-icon\"\r\n                    fontSize=\"large\"\r\n                    onClick={() => {\r\n                      props.onMusic(music);\r\n                    }}\r\n                  />\r\n                  <NavLink\r\n                    to=\"/login-main/detail\"\r\n                    state={{ music }}\r\n                    style={{ color: \"white\" }}\r\n                  >\r\n                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                      <span style={{ fontWeight: \"550\", fontSize: \"22px\" }}>\r\n                        {music.name}\r\n                      </span>\r\n                      <br />\r\n                      <span style={{ fontWeight: \"300\" }}>{music.singer}</span>\r\n                    </Typography>\r\n                  </NavLink>\r\n                </PlaylistItem>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n        <div style={{ paddingTop: \"2vw\" }}>\r\n          <h2 style={{ paddingBottom: \"1vw\", color: \"lightseagreen\" }}>\r\n            BILLBOARD TOP 15\r\n          </h2>\r\n          <Grid container spacing={1}>\r\n            {getFilteredMusics([\r\n              \"POP-솔로\",\r\n              \"POP-힙합\",\r\n              \"POP-락\",\r\n              \"POP-OST\",\r\n              \"POP-밴드\",\r\n            ]).map((music) => (\r\n              <Grid item xs={12} sm={6} md={4} key={music.id}>\r\n                <PlaylistItem\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  <PlaylistImage\r\n                    src={`${API_URL}/api${music.imageUrl}`}\r\n                    alt={music.name}\r\n                    onClick={() => {\r\n                      props.onMusic(music);\r\n                    }}\r\n                  />\r\n                  <PlayIcon\r\n                    className=\"play-icon\"\r\n                    fontSize=\"large\"\r\n                    onClick={() => {\r\n                      props.onMusic(music);\r\n                    }}\r\n                  />\r\n                  <NavLink\r\n                    to=\"/login-main/detail\"\r\n                    state={{ music }}\r\n                    style={{ color: \"white\" }}\r\n                  >\r\n                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                      <span style={{ fontWeight: \"550\", fontSize: \"22px\" }}>\r\n                        {music.name}\r\n                      </span>\r\n                      <br />\r\n                      <span style={{ fontWeight: \"300\" }}>{music.singer}</span>\r\n                    </Typography>\r\n                  </NavLink>\r\n                </PlaylistItem>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n        <div style={{ paddingTop: \"2vw\" }}>\r\n          <h2 style={{ paddingBottom: \"1vw\", color: \"lightseagreen\" }}>\r\n            J-POP TOP 15\r\n          </h2>\r\n          <Grid container spacing={1}>\r\n            {getFilteredMusics([\r\n              \"일본-아이돌\",\r\n              \"일본-애니\",\r\n              \"일본-가요\",\r\n              \"일본-락\",\r\n            ]).map((music) => (\r\n              <Grid item xs={12} sm={6} md={4} key={music.id}>\r\n                <PlaylistItem\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  <PlaylistImage\r\n                    src={`${API_URL}/api${music.imageUrl}`}\r\n                    alt={music.name}\r\n                    onClick={() => {\r\n                      props.onMusic(music);\r\n                    }}\r\n                  />\r\n                  <PlayIcon\r\n                    className=\"play-icon\"\r\n                    fontSize=\"large\"\r\n                    onClick={() => {\r\n                      props.onMusic(music);\r\n                    }}\r\n                  />\r\n                  <NavLink\r\n                    to=\"/login-main/detail\"\r\n                    state={{ music }}\r\n                    style={{ color: \"white\" }}\r\n                  >\r\n                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                      <span style={{ fontWeight: \"550\", fontSize: \"22px\" }}>\r\n                        {music.name}\r\n                      </span>\r\n                      <br />\r\n                      <span style={{ fontWeight: \"300\" }}>{music.singer}</span>\r\n                    </Typography>\r\n                  </NavLink>\r\n                </PlaylistItem>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n        <Footer />\r\n      </MainContent>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chartmusic;\r\n","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Monthmusic.js",["228","229"],[],"import React, { useState } from 'react';\r\nimport { CssBaseline, Box, Typography, CircularProgress } from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\nimport PlaylistAddIcon from \"@mui/icons-material/PlaylistAdd\";\r\nimport Footer from './Footer'\r\nimport axios from 'axios';\r\nimport { getCookie, removeCookie } from \"../cookie\";\r\nimport { API_URL } from '../config/contansts';\r\nimport useAsync from '../customHook/useAsync';\r\nimport '../scss/Monthmusic.scss';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TableFooter, TablePagination, } from \"@material-ui/core\";\r\n\r\nconst MainContent = styled('div')({\r\n  padding: '2vw',\r\n});\r\n\r\nconst TableCellStyle = {\r\n  borderRadius: '8px',\r\n  textAlign: 'center',\r\n  position: 'relative',\r\n  '&:hover .play-icon': {\r\n    opacity: 1,\r\n    cursor: 'pointer',\r\n  },\r\n  '&:hover img': {\r\n    opacity: 0.8,\r\n    cursor: 'pointer',\r\n  },\r\n};       \r\n\r\nconst PlaylistImage = styled('img')({\r\n  width: '5%',\r\n  transition: 'opacity 0.3s ease',\r\n});\r\n\r\nconst PlayIcon = styled(PlayArrowIcon)({\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '2.5%',\r\n  transform: 'translate(-50%, -50%)',\r\n  opacity: 0,\r\n  transition: 'opacity 0.3s ease',\r\n});\r\n\r\nconst Monthmusic = (props) => {\r\n  const navigate = useNavigate();\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  };\r\n\r\n  //전체곡 조회함수\r\n  const getMusics = async () => {\r\n    const res = await axios.get(`${API_URL}/api/musics`);\r\n    console.log(\"res.data:\", res.data);\r\n    return res.data;\r\n  };\r\n\r\n  const [state] = useAsync(getMusics, []);\r\n  const { loading, data: musics, error } = state; //state구조분해\r\n  if (loading) {\r\n    return (\r\n      <div style={{ textAlign: 'center', padding: '20px', color: 'white', backgroundColor: '#000', height: '100vh', display: \"flex\", flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          잠시만 기다려주세요...\r\n        </Typography>\r\n        <CircularProgress style={{ marginTop: '10px' }} />\r\n      </div>\r\n    )\r\n  }\r\n  if (error) return <div>에러가 발생했습니다.</div>;\r\n  if (!musics) {\r\n    return <div>로딩중입니다.</div>;\r\n  }\r\n\r\n  const addPlayList = async (music) => {\r\n    const login = getCookie('accessToken');\r\n    if (getCookie('accessToken') != null) {\r\n      await axios({\r\n        url: `${API_URL}/api/playlist`,\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: 'Bearer ' + login\r\n        },\r\n        data: {\r\n          playList: music,\r\n        }\r\n      })\r\n      .then(() => {\r\n        alert(\"추가되었습니다!\");\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n    }else {\r\n      alert('다시 로그인해주세요');\r\n      removeCookie('accessToken');\r\n      navigate('/');\r\n    }\r\n  }\r\n\r\n  const White = {\r\n    color: \"white\"\r\n  };\r\n\r\n  const paginatedMusics = musics.slice(page * rowsPerPage, (page + 1) * rowsPerPage);\r\n\r\n  return (\r\n    <div style={{ display: 'flex', background: 'black' }}>\r\n      <CssBaseline />\r\n      <MainContent style={{ color: 'white' }} className='mcmain'>\r\n          <h1 style={{ paddingBottom: '1vw' }}>이달의 노래</h1>\r\n            <TableContainer>\r\n              <Table size=\"small\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell style={White}>순위</TableCell>\r\n                    <TableCell style={{color: 'white'}}>앨범</TableCell>\r\n                    <TableCell style={White}>제목</TableCell>\r\n                    <TableCell style={White}>가수</TableCell>\r\n                    <TableCell style={White}>재생/담기</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {paginatedMusics.map((music, index) => (\r\n                    <TableRow key={music.id}>\r\n                      <TableCell style={White}>{(index + 1)+10*page}</TableCell>\r\n                      <TableCell>\r\n                        <NavLink to='/login-main/detail' state={{ music }} style={White}>\r\n                          <PlaylistImage style={{ width: '60px', height: '60px'}} src={API_URL + '/api' +music.imageUrl} alt={music.name}  />\r\n                          <PlayIcon className=\"play-icon\" fontSize=\"large\" />\r\n                        </NavLink>\r\n                      </TableCell>\r\n                      <TableCell style={{ width: 'fitContent'}}>\r\n                        <NavLink to='/login-main/detail' state={{ music }} style={White}>\r\n                          <Typography variant=\"subtitle1\" gutterBottom>{music.name}</Typography>\r\n                        </NavLink>\r\n                      </TableCell>\r\n                      <TableCell style={{}}>\r\n                        <NavLink to='/login-main/detail' state={{ music }} style={White}>\r\n                          <Typography variant=\"subtitle1\" gutterBottom>{music.singer}</Typography>\r\n                        </NavLink>\r\n                      </TableCell>\r\n                      <TableCell style={White}>\r\n                        <PlayArrowIcon style={{ cursor: 'pointer' }} onClick={() => { props.onMusic(music) }} />\r\n                        <PlaylistAddIcon style={{ cursor: 'pointer' }} onClick={() => { addPlayList(music) }} />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n                <TableFooter>\r\n                  <TableRow>\r\n                    <TablePagination\r\n                      count={musics.length}\r\n                      page={page}\r\n                      rowsPerPage={rowsPerPage}\r\n                      onChangePage={handleChangePage}\r\n                      onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                      style={{ backgroundColor: 'white'}}\r\n                    />\r\n                  </TableRow>\r\n                </TableFooter>\r\n              </Table>\r\n              {/* <Stack spacing={2}>\r\n                <Pagination count={10} shape=\"rounded\" style={{color: '#fff'}} />\r\n              </Stack> */}\r\n            </TableContainer>\r\n          <Footer />\r\n      </MainContent>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Monthmusic;\r\n","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Video.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Newchart.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Listbar.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\UpLoader.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\config\\contansts.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\cookie.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Audio.js",["230","231","232","233","234","235"],[],"import React, {useEffect} from \"react\";\r\nimport AudioPlayer from \"react-modern-audio-player\";\r\nimport PlaylistAddIcon from \"@mui/icons-material/PlaylistAdd\";\r\nimport DownloadIcon from \"@mui/icons-material/Download\";\r\nimport axios from \"axios\";\r\nimport { API_URL } from \"../config/contansts\";\r\nimport { getCookie, removeCookie } from \"../cookie\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst CustomAudioPlayer = ( {playList} ) => {\r\n  const navigate = useNavigate();\r\n  console.log(\"Audio/playList: \", playList);\r\n\r\n  useEffect(() => {\r\n    // useEffect 내에서 컴포넌트가 마운트된 후에 직접 스타일을 수정합니다.\r\n    const progressBar = document.querySelector(\".progress-bar\");\r\n\r\n    if (progressBar) {\r\n      progressBar.style.width = \"50%\"; // 원하는 너비로 조절합니다.\r\n    }\r\n  }, []);\r\n\r\n\r\n  const addPlayList = async () => {\r\n    //재생중인 음악 경로 가져오기\r\n    const url = document.getElementById(\"rm-audio-player-audio\"); \r\n\r\n    //재생중인 음악 이름 가져오기\r\n    const title = document.getElementsByClassName(\"title\")[0].innerText; \r\n\r\n    const login = getCookie('accessToken');\r\n    if (getCookie('accessToken') != null) {\r\n      await axios({\r\n        url: `${API_URL}/api/playlist`,\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: 'Bearer ' + login\r\n        },\r\n        data: {\r\n          playList: playList[0],\r\n        }\r\n      })\r\n      .then(() => {\r\n        alert(\"추가되었습니다!\");\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n    }else {\r\n      alert('다시 로그인해주세요');\r\n      removeCookie('accessToken');\r\n      navigate('/');\r\n    }\r\n  }\r\n\r\n  \r\n  //재생중인 음악 다운로드\r\n  const handleDownload = () => {\r\n\r\n    //재생중인 음악 경로 가져오기\r\n    const url = document.getElementById(\"rm-audio-player-audio\"); \r\n\r\n    //재생중인 음악 이름 가져오기\r\n    const title = document.getElementsByClassName(\"title\")[0].innerText; \r\n\r\n\r\n    // URL에서 GET 요청 보내기\r\n    const formet_musicUrl = url.src.substr(21); // \"http://localhost:3000\"부분 자르기\r\n    axios({\r\n      url: `${API_URL}/api/mp3`,\r\n      method: 'GET',\r\n      responseType: 'blob', // Set the expected response type to Blob\r\n      params: { url: formet_musicUrl }\r\n    })\r\n    .then((response) => {\r\n      console.log(response);\r\n      const blob = new Blob([response.data], { type: 'audio/mpeg' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n\r\n      // 생성한 URL과 다운로드할 파일명 설정\r\n      link.setAttribute('href', url);\r\n      link.setAttribute('download', `${title}.mp3`);\r\n\r\n      // 링크를 문서(body)에 추가\r\n      document.body.appendChild(link);\r\n\r\n      // 링크 클릭 => 파일 다운로드\r\n      link.click();\r\n\r\n      // 다운로드 후 링크와 URL을 정리\r\n      document.body.removeChild(link);\r\n      window.URL.revokeObjectURL(url);\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during file download:', error);\r\n    });\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    \r\n    <div id=\"Audio\">\r\n      \r\n      <AudioPlayer\r\n        playList={playList}\r\n        activeUI={{\r\n          playButton: true,\r\n          playList: true,\r\n          prevNnext: true,\r\n          volume: true,\r\n          volumeSlider: true,\r\n          repeatType: true,\r\n          trackTime: true,\r\n          trackInfo: true,\r\n          artwork: true,\r\n          progress: \"bar\",\r\n        }}\r\n        placement={{\r\n          interface: {\r\n            templateArea: {\r\n              artwork: \"row1-1\",\r\n              trackInfo: \"row1-2\",\r\n              playButton: \"row1-3\",\r\n              trackTimeCurrent: \"row1-4\",\r\n              trackTimeDuration: \"row1-5\",\r\n              progress: \"row1-6\",\r\n              repeatType: \"row1-7\",\r\n              volume: \"row1-8\",\r\n              playList: \"row1-9\",\r\n            },\r\n          },\r\n          player: \"bottom\",\r\n        }}\r\n      > \r\n        {/* <DownloadIcon onClick={handleDownload} style={{cursor: 'pointer'}} /> */}\r\n        {/* <PlaylistAddIcon onClick={addPlayList} style={{cursor: 'pointer', gridArea: 'row1-9'}} /> */}\r\n      </AudioPlayer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomAudioPlayer;\r\n","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Membershipmang.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\MusicDetail.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Scroll.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Mypage.js",["236"],[],"import React from 'react';\r\nimport { CssBaseline, Toolbar, Container, Box, Grid } from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport { getCookie, removeCookie } from \"../cookie\";\r\nimport { API_URL } from \"../config/contansts\";\r\nimport useAsync from \"../customHook/useAsync\";\r\nimport axios from \"axios\";\r\nimport '../scss/Mypage.scss';\r\nimport { AiOutlineUser } from \"react-icons/ai\";\r\nimport { AiOutlineLock } from \"react-icons/ai\";\r\nimport { IoTicketOutline } from \"react-icons/io5\";\r\n\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst DrawerContainer = styled('div')({\r\n  width: drawerWidth,\r\n  flexShrink: 0,\r\n});\r\n\r\nconst MainContent = styled('div')({\r\n  flexGrow: 1,\r\n  padding: 20,\r\n});\r\n\r\n// ---------------------------------------------- \r\nconst BoxContainer = styled(Box)({\r\n  border: '3px solid #ccc',\r\n  padding: '50px',\r\n  borderRadius: '8px',\r\n  marginBottom: '20px',\r\n  height: '300px',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n});\r\nconst BoxContainer1 = styled(Box)({\r\n  borderBottom: '3px solid #ccc',\r\n  padding: '20px',\r\n  paddingTop: '100px',\r\n  marginBottom: '20px',\r\n  height: '300px',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n});\r\n// -----------------------------------------------\r\n\r\nconst MyPage = () => {\r\n  // const [open, setOpen] = useState(false);\r\n  const login = getCookie('accessToken'); // 쿠키에서 로그인 정보를 가져옴\r\n  const navigate = useNavigate();\r\n\r\n  // 마이페이지 정보를 가져오는 비동기 함수 정의\r\n  const getMypage = async () => {\r\n    // const res = await axios.post(`${ API_URL }/user/mypage`, {login})\r\n    try {\r\n      // 서버에 로그인 정보를 전송하여 마이페이지 정보를 가져옴\r\n      // const res = await axios.post(`${ API_URL }/user/mypage`, {login});\r\n      const res = await axios({\r\n        url: `${API_URL}/api/user/mypage`,\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: 'Bearer ' + login\r\n        }\r\n      })\r\n      return res.data; // 가져온 마이페이지 정보 반환\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  // useAsync 훅을 사용하여 마이페이지 정보를 비동기적으로 가져오기\r\n  const [state] = useAsync(getMypage, []);\r\n  const { loading, data: user, error } = state; //state구조분해 \r\n  // 로딩 중일 때 로딩 메시지 표시\r\n  if (loading) return <div>로딩중 ......</div>\r\n  // 에러 발생 시 에러 메시지 표시하고 로그아웃 후 홈페이지로 이동\r\n  if (error) {\r\n    alert(\"다시 로그인해주세요\");\r\n    removeCookie(\"accessToken\");\r\n    navigate('/');\r\n    return <div>에러가 발생했습니다.</div>\r\n  } \r\n  if(!user){\r\n      return <div>로딩중입니다.</div>\r\n  }\r\n  // 마이페이지 정보가 없을 때 로딩 메시지 표시\r\n  if (!user) {\r\n    return <div>로딩중입니다.</div>\r\n  }\r\n  // 사용자가 회원 탈퇴 버튼을 클릭했을 때 실행되는 함수\r\n  const secession = async () => {\r\n    // 사용자에게 회원 탈퇴 확인 창 표시\r\n    if (window.confirm(\"정말 탈퇴하시겠습니까?\")) {\r\n      try {\r\n        // 서버에 회원 탈퇴 요청을 보냄\r\n        const response = await axios.delete(`${API_URL}/api/user`, {\r\n          headers: {\r\n            Authorization: `Bearer ${login}`\r\n          }\r\n        });\r\n        if (response.status === 200) {\r\n          // 회원 탈퇴 성공 시 알림을 표시하고 로그아웃 후 홈페이지로 이동\r\n          alert('회원 탈퇴가 완료되었습니다.');\r\n          removeCookie(\"accessToken\");\r\n          navigate('/'); //탈퇴 성공하면 홈페이지로 이동\r\n        }\r\n      } catch (error) {\r\n        // 회원 탈퇴 중 오류 발생 시 에러 메시지 표시\r\n        console.error(error);\r\n        alert('회원 탈퇴 중 오류가 발생했습니다.');\r\n      }\r\n    }\r\n    else {\r\n      // 사용자가 회원 탈퇴를 취소한 경우\r\n      return;\r\n    }\r\n  };\r\n  const style = {\r\n    color: \"white\"\r\n  };\r\n\r\n  return (\r\n    <div id='mypageC' style={{ display: 'flex' }}>\r\n      <CssBaseline />\r\n      {/* <Listb /> */}\r\n      <MainContent>\r\n        <Toolbar />\r\n        <Container>\r\n          <BoxContainer1>\r\n            <AiOutlineUser size={200} style={style}/>\r\n            <div>\r\n              <h3 style={style}>{user.name}님 반갑습니다.</h3>\r\n            </div>\r\n          </BoxContainer1>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={6}>\r\n              <BoxContainer>\r\n                <NavLink to='/login-main/edit' state={{ user }}>\r\n                  <AiOutlineLock id='icon1' size={40} style={style}/>\r\n                  <div id='mp2' style={style}>회원정보 수정</div>\r\n                </NavLink>\r\n              </BoxContainer>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <BoxContainer>\r\n                <NavLink to='/login-main/member'>\r\n                  <IoTicketOutline id='icon1' size={40} style={style}/>\r\n                  <div id='mp2' style={style}>이용권 관리</div>\r\n                </NavLink>\r\n              </BoxContainer>\r\n            </Grid>\r\n          </Grid>\r\n          <button onClick={secession}\r\n            style={{ width: '160px', height: '40px', float: 'right', backgroundColor: '#000', color: '#fff', borderRadius: '8px', border: '2px solid #fff'}}>\r\n            회원 탈퇴\r\n          </button>\r\n        </Container>\r\n      </MainContent>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default MyPage;\r\n","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Playlist.js",["237"],[],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport useAsync from \"../customHook/useAsync\";\r\nimport { API_URL } from \"../config/contansts\";\r\nimport { CssBaseline, Box, Grid, Typography, CircularProgress, Button } from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\nimport Footer from './Footer';\r\nimport { getCookie, removeCookie } from \"../cookie\";\r\nimport '../scss/Playlist.scss'\r\n\r\nconst EmptyPlaylistScreen = styled(\"div\")({\r\n  textAlign: \"center\",\r\n  padding: \"20px\",\r\n  color: \"white\",\r\n  background: \"black\",\r\n  minHeight: \"100vh\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n});\r\n\r\nconst ExploreButton = styled(Button)({\r\n  marginTop: '20px',\r\n  backgroundColor: '#3f51b5',\r\n  color: 'white',\r\n  \"&:hover\": {\r\n    backgroundColor: '#2a3f8d',\r\n  },\r\n});\r\n\r\nconst MainContent = styled('div')({\r\n  flexGrow: 1,\r\n  padding: 20,\r\n});\r\n\r\nconst PlaylistItem = styled(Box)({\r\n  padding: '20px',\r\n  borderRadius: '8px',\r\n  margin: '10px',\r\n  textAlign: 'center',\r\n  position: 'relative',\r\n  '&:hover .play-icon': {\r\n    opacity: 1,\r\n    cursor: 'pointer',\r\n    color:'red',\r\n  },\r\n  '&:hover img': {\r\n    opacity: 0.8,\r\n    cursor: 'pointer',\r\n  },\r\n});\r\n\r\nconst PlaylistImage = styled('img')({\r\n  marginBottom: '10px',\r\n  width: '90%',\r\n  height:\"20vh\",\r\n  transition: 'opacity 0.3s ease',\r\n});\r\n\r\nconst PlayIcon = styled(PlayArrowIcon)({\r\n  position: 'absolute',\r\n  top: '36%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  opacity: 0,\r\n  transition: 'opacity 0.3s ease',\r\n});\r\n\r\n\r\nconst PlayList = (props) => {\r\n  const navigate = useNavigate();\r\n\r\n\r\n  //전체곡 조회함수\r\n  const getPlayList = async () => {\r\n    const login = getCookie('accessToken');\r\n    if (getCookie('accessToken') != null) {\r\n      const res = await axios({\r\n        url: `${API_URL}/api/playlist`,\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: 'Bearer ' + login\r\n        }\r\n      })\r\n      console.log(\"res.data:\", res.data);\r\n      return res.data;\r\n    }else {\r\n      alert('다시 로그인해주세요');\r\n      removeCookie('accessToken');\r\n      navigate('/');\r\n    }\r\n  };\r\n\r\n  const [state] = useAsync(getPlayList, []);\r\n  const { loading, data: musics, error } = state; //state구조분해\r\n  if (loading) {\r\n    return (\r\n      <div style={{ textAlign: 'center', padding: '20px', color: 'white', backgroundColor: '#000', height: '100vh', display: \"flex\", flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          잠시만 기다려주세요...\r\n        </Typography>\r\n        <CircularProgress style={{ marginTop: '10px' }} />\r\n      </div>\r\n    )\r\n  }\r\n  if (!musics || musics.length === 0) {\r\n    return (\r\n      <EmptyPlaylistScreen>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          플레이 리스트가 비었습니다.\r\n        </Typography>\r\n        <Typography variant=\"body1\" paragraph>\r\n          플레이 리스트를 만들어보세요!\r\n        </Typography>\r\n        <ExploreButton variant=\"contained\" color=\"primary\" onClick={() => {navigate('/login-main/musics')}}>\r\n          구경.\r\n        </ExploreButton>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" style={{ marginTop: '10px', fontFamily: 'Arial', fontSize: '16px', fontWeight: 'bold' }}>\r\n          <NavLink to='/explore' style={{ color: \"#fff\" }}>다른 기능을 이용하여 더 많은 즐거움을 느껴보세요.</NavLink>\r\n        </Typography>\r\n        \r\n      </EmptyPlaylistScreen>\r\n    );\r\n  }\r\n\r\n\r\n  return (\r\n    <div style={{ display: 'flex', background:'black' }}>\r\n      <CssBaseline />\r\n      <MainContent>\r\n          <h1 style={{ color: 'white' }}>playlist</h1>\r\n          <Grid container spacing={2}>\r\n            {musics.map((playlist) => (\r\n              <Grid item xs={12} sm={6} md={2} key={playlist.Music.id}>\r\n                  <PlaylistItem style={{color : 'white'}} >\r\n                    <div onClick={() => {props.onMusic(playlist.Music)}}>\r\n                      <PlaylistImage \r\n                        src={`${API_URL}/api${playlist.Music.imageUrl}`} \r\n                        alt={playlist.Music.name}\r\n                      />\r\n                      <PlayIcon className=\"play-icon\" fontSize=\"large\" />\r\n                    </div>\r\n                    <NavLink to='/login-main/detail' state={{music: playlist.Music}} style={{color: \"#fff\"}}>\r\n                      <Typography variant=\"subtitle1\" gutterBottom><span style={{fontWeight: \"550\", fontSize: \"22px\"}}>{playlist.Music.name}</span></Typography>\r\n                      <Typography variant=\"body1\">{playlist.Music.singer}</Typography>\r\n                    </NavLink>\r\n                  </PlaylistItem>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n          <Footer/>\r\n      </MainContent>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayList;","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Musics.js",["238"],[],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport useAsync from \"../customHook/useAsync\";\r\nimport { API_URL } from \"../config/contansts\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"../scss/Musics.scss\";\r\nimport { Box, Grid, Typography, CircularProgress } from '@mui/material';\r\nimport { styled } from \"@mui/system\";\r\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\r\nimport Footer from './Footer';\r\n\r\nconst MainContent = styled(\"div\")({\r\n  flexGrow: 1,\r\n  padding: 20,\r\n});\r\n\r\nconst PlaylistItem = styled(Box)({\r\n  // border: '1px solid #ccc',\r\n  padding: \"20px\",\r\n  borderRadius: \"8px\",\r\n  margin: \"10px\",\r\n  textAlign: \"center\",\r\n  position: \"relative\",\r\n  '&:hover .play-icon': {\r\n    opacity: 1,\r\n    cursor: 'pointer',\r\n    color:'red',\r\n  },\r\n  '&:hover img': {\r\n    opacity: 0.8,\r\n    cursor: 'pointer',\r\n  },\r\n});\r\nconst PlaylistImage = styled(\"img\")({\r\n  marginBottom: \"10px\",\r\n  width: \"80%\",\r\n  height:\"17vw\",\r\n  transition: \"opacity 0.3s ease\",\r\n});\r\n\r\nconst PlayIcon = styled(PlayArrowIcon)({\r\n  position: \"absolute\",\r\n  top: \"45%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  opacity: 0,\r\n  transition: \"opacity 0.3s ease\",\r\n});\r\n\r\n\r\nconst Musics = (props) => {\r\n\r\n  //전체곡 조회함수\r\n  const getMusics = async () => {\r\n    const res = await axios.get(`${API_URL}/api/musics`);\r\n    console.log(\"res.data:\", res.data);\r\n    return res.data;\r\n  };\r\n\r\n  const [state] = useAsync(getMusics, []);\r\n  const { loading, data: musics, error } = state; //state구조분해\r\n  if (loading) {\r\n    return (\r\n      <div style={{ textAlign: 'center', padding: '20px', color: 'white', backgroundColor: '#000', height: '100vh', display: \"flex\", flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          잠시만 기다려주세요...\r\n        </Typography>\r\n        <CircularProgress style={{ marginTop: '10px' }} />\r\n      </div>\r\n    )\r\n  }\r\n  if (error) {\r\n    return <div>에러가 발생했습니다.</div>;\r\n  }\r\n  if (!musics) {\r\n    return <div>로딩중입니다.</div>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ backgroundColor: 'black' }}>\r\n      <MainContent>\r\n        <h1 style={{ color: 'white' }}>투데이</h1>\r\n        <div style={{padding:'2vw', backgroundColor:'black'}}>\r\n        <img style={{objectFit:'cover', width:'10vw', height:'auto', float:'left', marginRight:'5vw'}}src={API_URL+\"/images/aespa.png\"}></img>\r\n        <h1 style={{color:'white'}}>다시 엔진을 켜는, 에스파</h1>\r\n        <h3 style={{paddingTop:'2vw', color:'white'}}>2차엔 에스파의 다음 챕터를 향해 시동을 거는 듯한 MusicHub 프로젝트 외에도 여러 기술과 새로운 장르의 도전까지,<br/>\r\n        다양한 컬러로 채운 성숙한 변신이 가득한다. 팬덤을 생각하며 항상 엔진을 켜두는 에스파의 또 다른 출발</h3>\r\n        </div>\r\n        <h2 style={{ color: 'white', textAlign:'center', fontSize:'30px', marginTop:'20px', marginBottom:'20px', borderBottom:\"solid 1.5px gray\", height:'4vw'}}>Music<span style={{color:\"lightseagreen\"}}>Hub</span> 추천 플레이리스트</h2>\r\n        <Grid container spacing={2}>\r\n          {musics.map((music) => (\r\n            <Grid item xs={12} sm={6} md={4} key={music.id}>\r\n              <PlaylistItem>\r\n                <PlaylistImage\r\n                  src={API_URL+ '/api' +music.imageUrl}\r\n                  onClick={() => {props.onMusic(music)}}\r\n                  alt={music.name}\r\n                />\r\n                <PlayIcon \r\n                  className=\"play-icon\" \r\n                  fontSize=\"large\" \r\n                  onClick={() => {props.onMusic(music)}} \r\n                />\r\n                <NavLink to='/login-main/detail' state={{music}}>\r\n                <Typography style={{color:'white'}} variant=\"subtitle1\" gutterBottom>\r\n                  <span style={{fontWeight:'900', fontSize:\"23px\"}}>{music.name}</span>\r\n                  <br />\r\n                  <span style={{fontWeight:'300'}}>{music.singer}</span>\r\n                </Typography>\r\n                </NavLink>\r\n              </PlaylistItem>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n        <Footer/>\r\n      </MainContent>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Musics;\r\n","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Amount.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\AccordionItem.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\InfiniteRollingSlider.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\customHook\\useAsync.js",["239"],["240","241"],"import { useReducer, useEffect } from \"react\"\r\nconst initialState = {\r\n    loading: false,\r\n    data: null,\r\n    error: null\r\n}\r\n// 로딩중? 데이터 받기 성공? 데이터 받기 실패\r\n// LOADING , SUCCESS, ERROR\r\nfunction reducer(state, action){\r\n    switch(action.type) {\r\n        case \"LOADING\":\r\n            return {\r\n                loading: true,\r\n                data: null,\r\n                error: null\r\n            };\r\n        case \"SUCCESS\":\r\n            return {\r\n                loading: false,\r\n                data: action.data,\r\n                error: null\r\n            }\r\n        case \"ERROR\":\r\n            return {\r\n                loading: false,\r\n                data: null,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction useAsync(callback, deps = []) {\r\n    // console.log(\"useAsync진입: \", deps);\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    const fetchDate = async () => {\r\n        dispatch({type: \"LOADING\"});\r\n        try {\r\n            const data = await callback(); //callback은 getProduct()\r\n            console.log(\"어싱크data: \", data);\r\n            dispatch({\r\n                type: \"SUCCESS\",\r\n                data: data\r\n            })\r\n            if(data==false){\r\n                dispatch({\r\n                    type: \"ERROR\",\r\n                    error: \"강제에러\"\r\n                })  \r\n            }\r\n        }\r\n        catch(e){\r\n            dispatch({\r\n                type: \"ERROR\",\r\n                error: e\r\n            })\r\n        }\r\n    }\r\n    useEffect(()=>{ // useEffect(()=>{}, [])는 처음 1회만 실행 \r\n        fetchDate();\r\n    // eslint-disable-next-line\r\n    }, deps); //deps는 빈배열([]) 34라인\r\n    return [state, fetchDate];\r\n}\r\nexport default useAsync","C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Slider2.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Slider3.js",[],[],"C:\\Users\\user\\Desktop\\MusicHub-ec2\\popol2\\src\\routes\\Slider4.js",[],[],{"ruleId":"242","severity":1,"message":"243","line":7,"column":8,"nodeType":"244","messageId":"245","endLine":7,"endColumn":13},{"ruleId":"246","severity":1,"message":"247","line":6,"column":3,"nodeType":"244","messageId":"245","endLine":6,"endColumn":12},{"ruleId":"246","severity":1,"message":"248","line":8,"column":10,"nodeType":"244","messageId":"245","endLine":8,"endColumn":19},{"ruleId":"246","severity":1,"message":"249","line":24,"column":16,"nodeType":"244","messageId":"245","endLine":24,"endColumn":23},{"ruleId":"250","severity":1,"message":"251","line":55,"column":6,"nodeType":"252","endLine":55,"endColumn":8,"suggestions":"253"},{"ruleId":"254","severity":1,"message":"255","line":59,"column":31,"nodeType":"256","messageId":"257","endLine":59,"endColumn":33},{"ruleId":"242","severity":1,"message":"258","line":1,"column":16,"nodeType":"244","messageId":"245","endLine":1,"endColumn":25},{"ruleId":"259","severity":1,"message":"260","line":79,"column":16,"nodeType":"261","messageId":"262","endLine":79,"endColumn":19},{"ruleId":"263","severity":1,"message":"264","line":26,"column":5,"nodeType":"265","messageId":"262","endLine":26,"endColumn":12},{"ruleId":"242","severity":1,"message":"266","line":9,"column":20,"nodeType":"244","messageId":"245","endLine":9,"endColumn":31},{"ruleId":"242","severity":1,"message":"267","line":10,"column":24,"nodeType":"244","messageId":"245","endLine":10,"endColumn":39},{"ruleId":"242","severity":1,"message":"268","line":11,"column":10,"nodeType":"244","messageId":"245","endLine":11,"endColumn":23},{"ruleId":"242","severity":1,"message":"269","line":11,"column":25,"nodeType":"244","messageId":"245","endLine":11,"endColumn":41},{"ruleId":"242","severity":1,"message":"270","line":12,"column":10,"nodeType":"244","messageId":"245","endLine":12,"endColumn":20},{"ruleId":"242","severity":1,"message":"271","line":12,"column":22,"nodeType":"244","messageId":"245","endLine":12,"endColumn":35},{"ruleId":"250","severity":1,"message":"272","line":103,"column":6,"nodeType":"252","endLine":103,"endColumn":8,"suggestions":"273"},{"ruleId":"242","severity":1,"message":"274","line":2,"column":10,"nodeType":"244","messageId":"245","endLine":2,"endColumn":19},{"ruleId":"250","severity":1,"message":"275","line":43,"column":6,"nodeType":"252","endLine":43,"endColumn":8,"suggestions":"276"},{"ruleId":"242","severity":1,"message":"277","line":7,"column":10,"nodeType":"244","messageId":"245","endLine":7,"endColumn":17},{"ruleId":"250","severity":1,"message":"275","line":110,"column":6,"nodeType":"252","endLine":110,"endColumn":8,"suggestions":"278"},{"ruleId":"242","severity":1,"message":"279","line":2,"column":23,"nodeType":"244","messageId":"245","endLine":2,"endColumn":26},{"ruleId":"242","severity":1,"message":"280","line":19,"column":7,"nodeType":"244","messageId":"245","endLine":19,"endColumn":21},{"ruleId":"242","severity":1,"message":"281","line":3,"column":8,"nodeType":"244","messageId":"245","endLine":3,"endColumn":23},{"ruleId":"242","severity":1,"message":"282","line":4,"column":8,"nodeType":"244","messageId":"245","endLine":4,"endColumn":20},{"ruleId":"242","severity":1,"message":"283","line":24,"column":9,"nodeType":"244","messageId":"245","endLine":24,"endColumn":20},{"ruleId":"242","severity":1,"message":"284","line":26,"column":11,"nodeType":"244","messageId":"245","endLine":26,"endColumn":14},{"ruleId":"242","severity":1,"message":"285","line":29,"column":11,"nodeType":"244","messageId":"245","endLine":29,"endColumn":16},{"ruleId":"242","severity":1,"message":"286","line":58,"column":9,"nodeType":"244","messageId":"245","endLine":58,"endColumn":23},{"ruleId":"242","severity":1,"message":"287","line":18,"column":7,"nodeType":"244","messageId":"245","endLine":18,"endColumn":22},{"ruleId":"242","severity":1,"message":"288","line":98,"column":34,"nodeType":"244","messageId":"245","endLine":98,"endColumn":39},{"ruleId":"289","severity":1,"message":"290","line":84,"column":9,"nodeType":"291","endLine":84,"endColumn":137},{"ruleId":"292","severity":1,"message":"293","line":46,"column":20,"nodeType":"294","messageId":"262","endLine":46,"endColumn":22},{"ruleId":"250","severity":1,"message":"295","line":63,"column":8,"nodeType":"244","endLine":63,"endColumn":12,"suppressions":"296"},{"ruleId":"250","severity":1,"message":"297","line":63,"column":8,"nodeType":"244","endLine":63,"endColumn":12,"suggestions":"298","suppressions":"299"},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'ANONYMOUS' is defined but never used.","'useParams' is defined but never used.","'setName' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'price'. Either include it or remove the dependency array.","ArrayExpression",["300"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-dupe-keys","Duplicate key 'trigger'.","ObjectExpression","'setUserData' is assigned a value but never used.","'setCategoryData' is assigned a value but never used.","'totalVisitors' is assigned a value but never used.","'setTotalVisitors' is assigned a value but never used.","'totalSales' is assigned a value but never used.","'setTotalSales' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'categoryData' and 'userData'. Either include them or remove the dependency array.",["301"],"'TextField' is defined but never used.","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["302"],"'NavLink' is defined but never used.",["303"],"'Box' is defined but never used.","'TableCellStyle' is assigned a value but never used.","'PlaylistAddIcon' is defined but never used.","'DownloadIcon' is defined but never used.","'addPlayList' is assigned a value but never used.","'url' is assigned a value but never used.","'title' is assigned a value but never used.","'handleDownload' is assigned a value but never used.","'DrawerContainer' is assigned a value but never used.","'error' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.",["304"],"React Hook useEffect has a missing dependency: 'fetchDate'. Either include it or remove the dependency array.",["305"],["306"],{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"311","fix":"313"},{"kind":"314","justification":"315"},{"desc":"316","fix":"317"},{"kind":"314","justification":"315"},"Update the dependencies array to be: [price]",{"range":"318","text":"319"},"Update the dependencies array to be: [categoryData, userData]",{"range":"320","text":"321"},"Update the dependencies array to be: [navigate]",{"range":"322","text":"323"},{"range":"324","text":"323"},"directive","","Update the dependencies array to be: [fetchDate]",{"range":"325","text":"326"},[2074,2076],"[price]",[3085,3087],"[categoryData, userData]",[1299,1301],"[navigate]",[2928,2930],[1667,1671],"[fetchDate]"]